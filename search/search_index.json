{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"foundry","text":"<p>This repository contains much of Slack\u2019s Android/Kotlin/JVM tooling for Gradle, IntelliJ, CLIs, and more.</p> <p>This repo is effectively for Slack\u2019s own used but publishes to Maven Central. We develop these in the open to knowledge-share with the community.</p> <p>As such, we don\u2019t normally accept external PRs, but we welcome your questions in the discussions section of the project!</p>"},{"location":"#highlights","title":"Highlights","text":""},{"location":"#common-project-configuration","title":"Common project configuration","text":"<p>The <code>foundry.base</code> plugin offers common configuration for all projects implementing it, covering a wide spectrum of Android, Kotlin, and Java configurations.</p> <p>This includes a whole host of things!</p> <ul> <li>Common Android configuration (single variant libraries, disabling unused features, compose, etc).</li> <li>Common Kotlin configuration (freeCompilerArgs, JVM target, etc).</li> <li>Common Java configuration (toolchains, release versions, etc).</li> <li>Common annotation processors.</li> <li><code>FoundryExtension</code> (see next section).</li> <li>Formatting (via Spotless).</li> <li>Platforms and BOM dependencies (see \u201cPlatform plugins\u201d section below).</li> <li>Common lint checks (both on Android and plain JVM projects).</li> </ul> <p>Full docs can be found in the architecture docs.</p>"},{"location":"#feature-dsl","title":"Feature DSL","text":"<p>To ease use and configuration of common features in projects, we expose a <code>foundry</code> DSL in projects that allows for configuration of these in a semantically easy and boilerplate-free way. This is controlled via <code>FoundryExtension</code>.</p> <pre><code>foundry {\n  features {\n    dagger()\n    moshi(codegen = true)\n  }\n  android {\n    features {\n      robolectric()\n    }\n  }\n}\n</code></pre> <p>A major benefit of this is that we can intelligently configure features and avoid applying costly plugins like Kapt unless they\u2019re actually needed for a specific feature, such as Java injections in projects using Dagger. Since this is pure code, we can also propagate deprecated behavior by deprecating the corresponding functions in the DSL.</p>"},{"location":"#platform-plugins","title":"Platform plugins","text":"<p><code>Platforms.kt</code> contains an implementation that sources a <code>VersionCatalog</code> and applies it to a Gradle platform project. This allows us to effectively treat our versions catalog as a BOM and apply it to all projects in the consuming repo and reduce dependency version stratification.</p>"},{"location":"#thermal-throttling-capture","title":"Thermal throttling capture","text":"<p>MacBooks can suffer thermal throttling and result in poor build performance. We built instrumentation for this to capture these and include them in our build scans to better understand their impact. We support both Intel and Apple Silicon macs now and contain this implementation in <code>ThermalsWatcher.kt</code>. This also includes helpful charting APIs for visualizing the data (courtesy of our friends at Square).</p>"},{"location":"#better-properties","title":"Better Properties","text":"<p>Gradle\u2019s built-in property support is limited and has surprising behavior, so we have our own system on top of it that has consistent precedence, <code>local.properties</code> support, project-local <code>gradle.properties</code>, and configuration caching support. Check out <code>PropertyResolver</code>.</p>"},{"location":"#dependency-rake","title":"Dependency Rake","text":"<p><code>DependencyRake.kt</code> contains an extension to the <code>gradle-dependency-analysis-plugin</code> that applies its advice to a project to automatically optimize it and rake dependencies.</p>"},{"location":"#module-stats-aka-mod-score","title":"Module Stats (aka \u201cMod Score\u201d)","text":"<p>As a part of our modularization efforts, we developed a scoring mechanism for modules that we could use as a measure of their \u201cmodularization\u201d. This includes a number of metrics and weighs them in a formula to compute a score. This includes LoC, language mixtures, and build graph centrality. This logic is under the <code>foundry.stats</code> package.</p>"},{"location":"#robolectric-jars-management","title":"Robolectric Jars Management","text":"<p>Robolectric uses preinstrumented Android API jars that live on maven central. While it can handle downloading of these automatically, we found this implementation to be brittle and unreliable, so we built our own version of it that handles downloading these into a local <code>.cache</code> directory. This implementation lives in <code>UpdateRobolectricJarsTask.kt</code> and that task is configured to be a dependency of all <code>Test</code> tasks.</p>"},{"location":"#bootstrap","title":"Bootstrap","text":"<p>We try to simplify and streamline the bootstrap process for both local development and on CI. This involves computing optimized JVM arguments for the Gradle and Kotlin daemons (which differ between CI and local) as well as toe-holds for future customizations. This logic lives in <code>BootstrapTask.kt</code>.</p>"},{"location":"#permission-checks","title":"Permission Checks","text":"<p>To avoid accidentally checking in any new, unexpected manifest permissions, we have a <code>CheckManifestPermissionsTask</code> that compares the final merged manifest\u2019s permissions to an allow list of known permissions. This is allow list is checked in and expected to be guarded by a <code>CODEOWNERS</code> watch and will fail the build if they differ.</p> <pre><code>slack {\n  android {\n    app {\n      permissionAllowlist {\n        if (name == \"externalRelease\") {\n          setAllowlistFile(file(\"permissionsAllowlist.txt\"))\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"#apk-versioning-computers","title":"APK Versioning Computers","text":"<p>AGP offers new property-based APIs for computing APK version codes and version names. We use this to compute information from different inputs (CI build number, git state, etc) and control this logic in <code>ApkVersioningPlugin.kt</code>.</p>"},{"location":"#check-dependency-versions","title":"Check dependency versions","text":"<p>Sometimes a dependency update may bring with it a surprise update to a transitive dependency that we also declare. In order to avoid this happening unexpectedly, the <code>CheckDependencyVersionsTask</code> checks that any transitive dependency versions that also correspond to a version declared in our <code>VersionCatalog</code> match the version there. It\u2019s ok if they don\u2019t, but the author just need to update the version in the catalog too to be explicit (or investigate further if it\u2019s an unwanted surprise!).</p>"},{"location":"#agp-handlers","title":"AGP Handlers","text":"<p>AGP occasionally contains new or breaking API changes that we want to handle gracefully in early testing. We regularly test against newer preview versions of AGP so we can\u2019t just hardcode in new APIs and expect them to work everywhere. To handle this, we have an <code>AgpHandler</code> interface that can be used to abstract these new APIs in a backward-compatible way. Then we ship implementations of this as different artifacts that are built against different AGP versions. Then, at runtime, we pick the appropriate instance (via service loading) to use for the current AGP version being used in that build.</p>"},{"location":"#detekt-baselining","title":"Detekt baselining","text":"<p>Detekt is a static analysis tool that we use to check for common issues in our code. We use one global baseline file for baselined issues (when introducing new checks or updates), but Detekt doesn\u2019t currently support this easily. So, we built <code>MergeDetektBaselinesTask</code> to merge all the generated baselines from each subproject into a single global baseline.</p>"},{"location":"#misc-tools","title":"Misc tools","text":"<p>There are a ton of miscellaneous tools, utilities, and glue code for Gradle (and various plugins) sprinkled throughout this project.</p>"},{"location":"#usage-requirements","title":"Usage requirements","text":"<p>SGP expects there to be a <code>libs</code> version catalog.</p> <p>The following versions are required to be set the above catalog. Their docs can be found in <code>FoundryVersions.kt</code>.</p> <p>For Android projects, some extra definitions need to be defined</p> <ul> <li><code>libs.versions.toml</code> libraries<ul> <li><code>google-coreLibraryDesugaring</code> - the core library desugaring libraries to use with L8.</li> </ul> </li> <li><code>gradle.properties</code> properties<ul> <li><code>foundry.compileSdkVersion</code></li> <li><code>foundry.targetSdkVersion</code></li> <li><code>foundry.minSdkVersion</code></li> </ul> </li> </ul> <p>The following plugins are applied by default but can be disabled if you don\u2019t need them.</p> <ul> <li>Gradle\u2019s test retry \u2013 <code>foundry.auto-apply.test-retry</code><ul> <li>By default, this uses the Gradle test-retry plugin, but can be configured to use the Gradle Enterprise plugin\u2019s implementation instead by setting the <code>foundry.test.retry.pluginType</code> property to <code>GE</code>.</li> </ul> </li> <li>Spotless \u2013 <code>foundry.auto-apply.spotless</code></li> <li>Detekt \u2013 <code>foundry.auto-apply.detekt</code></li> <li>NullAway \u2013 <code>foundry.auto-apply.nullaway</code></li> <li>Android Cache Fix \u2013 <code>foundry.auto-apply.cache-fix</code></li> </ul>"},{"location":"#commit-hooks","title":"Commit hooks","text":"<p>The <code>installCommitHooks</code> task can install commit hooks for formatting kotlin and java files. They expect binaries to be in <code>&lt;root&gt;/config/git/hooks</code> and it\u2019s highly recommended to enable git-lfs for these objects. These binaries can be downloaded via the <code>updateKtfmt</code>, <code>updateGjf</code>, etc tasks.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2022 Slack Technologies, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0300","title":"0.30.0","text":"<p>2025-08-08</p> <ul> <li>Support Gradle 9.0.</li> <li>Update Wire to <code>5.3.7</code>.</li> <li>Update Spotlight to <code>1.3.3</code>.</li> </ul>"},{"location":"changelog/#0290","title":"0.29.0","text":"<p>2025-08-05</p> <ul> <li>New: Add Spotlight output to Skippy.</li> <li>Enhancement: Stop echo-ing debug logs in <code>CliktFoundryLogger</code>.</li> <li>Fix: Propagate <code>foundry.di.metro.interop.anvil</code> property correctly to Metro.</li> <li>Fix: Don\u2019t add anvil runtime projects as dependencies of themselves.</li> <li>Update Okio to <code>3.16.0</code>.</li> <li>Update Circuit to <code>0.30.0</code>.</li> <li>Update xmlutil to <code>0.91.2</code>.</li> <li>Update kaml to <code>0.85.0</code>.</li> <li>Update bugsnag to <code>3.8.0</code>.</li> <li>Update wire to <code>5.3.5</code>.</li> <li>Update okhttp to <code>5.1.0</code>.</li> <li>Update rxjava to <code>3.1.11</code>.</li> <li>Update kotlinx-serialization to <code>1.9.0</code>.</li> <li>Update moshix <code>0.31.0</code>.</li> <li>Build against redacted-compiler-plugin <code>1.14.1</code>.</li> <li>Build against gradle-errorprone-plugin <code>4.3.0</code>.</li> <li>Build against roborazzi <code>1.46.1</code>.</li> <li>Build against emulator.wtf <code>0.19.3</code>.</li> <li>Build against maven-publish <code>0.34.0</code>.</li> <li>Build against Metro <code>0.5.5</code>.</li> <li>Build against AGP <code>8.12.0</code>.</li> <li>Build against Spotlight <code>1.3.2</code>.</li> <li>Build against Spotless <code>7.2.1</code>.</li> <li>Build against Develocity <code>4.1</code>.</li> </ul> <p>Special thanks to @ChrisBanes for contributing to this release!</p>"},{"location":"changelog/#0281","title":"0.28.1","text":"<p>2025-06-26</p> <ul> <li>Update AGP to <code>8.11.0</code>.</li> <li>Build against Graph Assert <code>2.9.0</code>.</li> <li>Build against KSP <code>2.2.0-2.0.2</code>.</li> </ul>"},{"location":"changelog/#0280","title":"0.28.0","text":"<p>2025-06-23</p> <ul> <li>Add new <code>foundry.kotlin.jvm.jvmDefaultMode</code> property to configure the new <code>-jvm-default</code> mode in KGP. Unlike KGP, Foundry defaults to <code>NO_COMPATIBILITY</code>.</li> <li>Remove deprecated <code>StrongSkipping</code> and <code>IntrinsicRemember</code> compose flags.</li> <li>Update to Kotlin <code>2.2.0</code>.</li> <li>Build against KSP <code>2.2.0-2.0.2</code>.</li> <li>Build against gradle-maven-publish-plugin <code>0.33.0</code>.</li> <li>Build against spotlight <code>1.1</code>.</li> </ul>"},{"location":"changelog/#0276","title":"0.27.6","text":"<p>2025-06-18</p> <ul> <li>Add support for <code>--all-projects-file</code> to <code>gradle-settings-verifier</code> CLI.</li> <li>Remove deprecated configs from gradle-doctor.</li> <li>Build against Compose <code>1.8.2</code>.</li> </ul>"},{"location":"changelog/#0275","title":"0.27.5","text":"<p>2025-06-17</p> <ul> <li>Always defensively patch KSP tasks with sqldelight and viewbinding.</li> <li>Update ktfmt to <code>0.55</code> and change the download url for the <code>updateKtfmt</code> task.</li> <li>Update Retrofit to <code>3.0.0</code>.</li> <li>Update Okio to <code>3.13.0</code>.</li> <li>Update Circuit to <code>0.28.1</code>.</li> <li>Update Wire to <code>5.3.3</code>.</li> <li>Update Oshi to <code>6.8.2</code>.</li> <li>Build against Compose <code>1.8.1</code>.</li> <li>Build against AGP <code>8.10.1</code>.</li> <li>Build against Spotless <code>7.0.4</code>.</li> <li>Build against Develocity <code>4.0.2</code>.</li> <li>Build against DAGP <code>2.18.0</code>.</li> <li>Build against Gradle Doctor <code>0.11.0</code>.</li> <li>Build against Spotlight <code>1.0</code>.</li> <li>Build against KSP <code>2.1.21-2.0.2</code>.</li> <li>Build against Gradle <code>8.14.2</code>.</li> </ul>"},{"location":"changelog/#0274","title":"0.27.4","text":"<p>2025-05-20</p> <ul> <li>Check both <code>bootstrap</code> and <code>:bootstrap</code> task names when registering bootstrap.</li> </ul>"},{"location":"changelog/#0273","title":"0.27.3","text":"<p>2025-05-16</p> <ul> <li>Add <code>--dependency-graph-edges</code> support to Skippy CLI. This allows you to specify a newline-delimited set of edges in a graph rather than a serialized graph.</li> <li>Automatically mark <code>androidTest</code> APKs as <code>debuggable</code>, avoiding the need to manually specify placeholder manifests with a <code>debuggable</code> attribute set.</li> <li>Update xmlutil to <code>0.91.1</code>.</li> <li>Update kaml to <code>0.78.0</code>.</li> <li>Build against Kotlin <code>2.1.21</code>.</li> <li>Build against KSP <code>2.1.21-2.0.1</code>.</li> </ul>"},{"location":"changelog/#0272","title":"0.27.2","text":"<p>2025-05-09</p> <ul> <li>Use <code>finalizeDsl</code> when configuring KSP tasks if running in an android project.</li> <li>Update kaml to <code>0.77.1</code>.</li> <li>Build against AGP <code>8.10.0</code>.</li> <li>Build against KSP <code>2.1.20-2.0.1</code>.</li> </ul>"},{"location":"changelog/#0271","title":"0.27.1","text":"<p>2025-04-30</p> <ul> <li>Add a new <code>foundry.android.compressWithLegacyPackaging</code> property to enable legacy compression for all APKs.</li> <li>Fix Jakarta coordinates when applying Dagger runtime deps.</li> <li>Build against DAGP <code>2.17.0</code>.</li> </ul>"},{"location":"changelog/#0270","title":"0.27.0","text":"<p>2025-04-25</p> <ul> <li>Add a <code>metro()</code> feature.</li> <li>Always set targetSdk in <code>androidx.benchmark</code> projects.</li> <li>Remove Guava dependency from version-number artifact.</li> <li>Update coroutines to <code>1.10.2</code>.</li> <li>Update Okio to <code>3.11.0</code>.</li> <li>Update Oshi to <code>6.8.1</code>.</li> <li>Update Kaml to <code>0.70.0</code>.</li> <li>Update Guava to <code>33.4.8-jre</code>.</li> <li>Update xmlutil to <code>0.91.0</code>.</li> <li>Build against Gradle <code>8.14</code>.</li> <li>Build against AGP <code>8.9.2</code>.</li> <li>Build against Develocity <code>4.0.1</code>.</li> <li>Build against error-prone-gradle <code>4.2.0</code>.</li> <li>Build against emulator.wtf Gradle plugin <code>0.19.1</code>.</li> </ul>"},{"location":"changelog/#0260","title":"0.26.0","text":"<p>2025-03-27</p> <ul> <li>New: Add a <code>dependencies.testJavaAgents { ... }</code> API for configuring Java agents that need to run in tests, such as Mockito in future versions of Java.</li> <li>New: Add <code>foundry.testing</code> DSL, starting with a new <code>burst()</code> feature.</li> <li>Use the Gradle <code>Problems</code> API in more places.</li> <li>Update to Kotlin <code>2.1.20</code>. Note this should only be used with <code>2.1.20</code> or later.</li> <li>Remove <code>includeSourceInformation</code> workarounds for compose as this is enabled by default now in compose-compiler as of Kotlin <code>2.1.20</code>.</li> <li>Remove <code>liveLiterals</code> compose check as it\u2019s long-deprecated and off by default now.</li> <li>Update Guava to <code>33.4.6</code>.</li> <li>Update Oshi to <code>6.8.0</code>.</li> <li>Update Kaml to <code>0.73.0</code>.</li> <li>Build against Roborazzi <code>1.43.1</code>.</li> <li>Build against AGP <code>8.9.1</code>.</li> <li>Build against DAGP <code>2.13.1</code>.</li> </ul>"},{"location":"changelog/#0254","title":"0.25.4","text":"<p>2025-03-14</p> <ul> <li>Small project validation fixes.</li> <li>Update Oshi to <code>6.7.1</code>.</li> <li>Build against DAGP <code>2.12.0</code>.</li> </ul>"},{"location":"changelog/#0253","title":"0.25.3","text":"<p>2025-03-12</p> <ul> <li>Allow <code>jvmTarget</code> to be configurable per-project with the <code>foundry.jvm.target</code> property. Default is still the <code>jvmTarget</code> defined in <code>libs.versions.toml</code>.</li> </ul>"},{"location":"changelog/#0252","title":"0.25.2","text":"<p>2025-03-11</p> <ul> <li>Compile Gradle plugin code with <code>-Xlambdas=class</code> for Gradle compatibility.</li> </ul>"},{"location":"changelog/#0251","title":"0.25.1","text":"<p>2025-03-10</p> <ul> <li>Remove automatic gradle versions plugin support.</li> </ul>"},{"location":"changelog/#0250","title":"0.25.0","text":"<p>2025-03-10</p> <ul> <li>Add optional <code>validate(Kotlin|Java)VersionMatches</code> tasks to keep files like <code>.java_version</code> synced with version catalogs.</li> <li>Update Graph Assert to <code>2.8.0</code>.</li> <li>Update Wire to <code>5.3.1</code>.</li> <li>Build against AGP <code>8.9.0</code>.</li> <li>Raise JVM target across all targets to <code>21</code>.</li> <li>Minimum supported Gradle version is <code>8.12</code>.</li> </ul>"},{"location":"changelog/#02411","title":"0.24.11","text":"<p>2025-02-27</p> <ul> <li>New: Introduce a Buildkite Kotlin DSL to make it easier to write buildkite pipelines.</li> </ul> <pre><code>val pipeline = pipeline {\n  commandStep {\n    label = \"Run tests\"\n    command = \"run-tests.sh\"\n    env {\n      \"ENV_VAR\" to \"value\"\n    }\n  }\n}\n</code></pre> <ul> <li>Update oshi to <code>6.7.0</code>.</li> <li>Update KotlinPoet to <code>2.1.0</code>.</li> <li>Update slf4j-nop to <code>2.0.17</code>.</li> <li>Build against RCP <code>1.12.1</code>.</li> <li>Build against Detekt <code>1.23.8</code>.</li> <li>Build against Gradle <code>8.13</code>.</li> <li>Build against AGP <code>8.8.2</code>.</li> <li>Build against Roborazzi <code>1.43.0</code>.</li> </ul>"},{"location":"changelog/#02410","title":"0.24.10","text":"<p>2025-02-22</p> <ul> <li>Remove yet another noisy log.</li> </ul>"},{"location":"changelog/#0249","title":"0.24.9","text":"<p>2025-02-22</p> <ul> <li>Remove noisy log.</li> </ul>"},{"location":"changelog/#0248","title":"0.24.8","text":"<p>2025-02-22</p> <ul> <li>Fix applying common JVM compiler options in KMP projects.</li> </ul>"},{"location":"changelog/#0247","title":"0.24.7","text":"<p>2025-02-21</p> <ul> <li>Add skippy overlay controls. This allows you to exclude overlaying of global settings onto local tool configs.</li> <li>Update Kaml to <code>0.72.0</code>.</li> <li>Update Mordant to <code>3.0.2</code>.</li> <li>Build against Develocity <code>3.19.2</code>.</li> <li>Build against Roborazzi <code>1.42.0</code>.</li> <li>Build against KSP <code>2.1.10-1.0.30</code>.</li> <li>Build against AGP <code>8.8.1</code>.</li> </ul>"},{"location":"changelog/#0246","title":"0.24.6","text":"<p>2025-02-13</p> <ul> <li>Remove noisy test configuration logs.</li> </ul>"},{"location":"changelog/#0245","title":"0.24.5","text":"<p>2025-02-13</p> <ul> <li>Fix <code>com.android.test</code> test configuration.</li> </ul>"},{"location":"changelog/#0244","title":"0.24.4","text":"<p>2025-02-13</p> <ul> <li>New: <code>foundry.android.features.snapshotTests</code> DSL to enable snapshot tests on a subproject. This will pick roborazzi if defined in <code>libs.versions.toml</code>.</li> <li>Add Skippy support for emulator.wtf tasks.</li> <li>Build against JDK 23.</li> <li>Build against DAGP <code>2.8.2</code>.</li> <li>Build against Roborazzi <code>1.41.0</code>.</li> </ul>"},{"location":"changelog/#0243","title":"0.24.3","text":"<p>2025-02-10</p> <ul> <li>Fix noisy kapt args log.</li> <li>Make <code>--android-test-project-paths</code> optional in Skippy.</li> <li>Change exec prefixes added to CLI jars to use <code>JAVA_HOME</code> envs.</li> <li>Update clikt to <code>5.0.3</code>.</li> <li>Update kaml to <code>0.71.0</code>.</li> <li>Build against gradle retry <code>1.6.2</code>.</li> <li>Build against DAGP <code>2.8.1</code>.</li> </ul>"},{"location":"changelog/#0242","title":"0.24.2","text":"<p>2025-01-30</p> <ul> <li>Fix loading of optional properties with defined default values.</li> <li>Update to Kotlin <code>2.1.10</code>.</li> <li>Build against KSP <code>2.1.10-1.0.29</code>.</li> </ul>"},{"location":"changelog/#0241","title":"0.24.1","text":"<p>2025-01-27</p> <ul> <li>Gate Dagger\u2019s processing options on a new <code>foundry.dagger.options</code> property. The structure of this is a comma-separated list of key=value pairs. i.e. <code>foundry.dagger.options=dagger.useBindingGraphFix=ENABLED,dagger.ignoreProvisionKeyWildcards=ENABLED</code>.</li> </ul>"},{"location":"changelog/#0240","title":"0.24.0","text":"<p>2025-01-24</p> <p>Happy new year!</p> <ul> <li>Add orchestrator dep by default when <code>androidTest()</code> feature is enabled.</li> <li>Automatically enable Dagger\u2019s new <code>dagger.useBindingGraphFix</code> option in 2.55.</li> <li>Update to Develocity adapters plugin <code>1.1</code>.</li> <li>Update to graph assert <code>2.7.3</code>.</li> <li>Update to Wire <code>5.2.1</code>.</li> <li>Update to Okio <code>3.10.2</code>.</li> <li>Update to kotlinx coroutines <code>1.10.1</code>.</li> <li>Update to kotlinx serialization <code>1.8.0</code>.</li> <li>Update to JNA <code>5.16.0</code>.</li> <li>Update to KAML <code>0.67.0</code>.</li> <li>Update to guava <code>33.4.0-jre</code>.</li> <li>Update to apache commons text <code>1.13.0</code>.</li> <li>Build against AGP <code>8.8.0</code>.</li> <li>Build against Anvil <code>0.4.1</code>.</li> <li>Build against Dokka <code>2.0.0</code>.</li> <li>Build against compose gradle plugin <code>1.7.3</code>.</li> <li>Build against Develocity plugin <code>3.19.1</code>.</li> <li>Build against gradle retry plugin <code>1.6.1</code>.</li> <li>Build against Spotless plugin <code>7.0.1</code>.</li> <li>Build against nullaway gradle plugin <code>2.2.0</code>.</li> <li>Build against Roborazzi gradle plugin <code>1.38.0</code>.</li> <li>Build against DAGP <code>2.7.0</code>.</li> <li>Build against sort dependencies plugin <code>0.14</code>.</li> <li>Build against gradle <code>8.12.1</code>.</li> <li>Build against redacted gradle plugin <code>1.12.0</code>.</li> </ul>"},{"location":"changelog/#0237","title":"0.23.7","text":"<p>2024-12-13</p> <ul> <li>Fix verifyRoborazzi task name.</li> </ul>"},{"location":"changelog/#0236","title":"0.23.6","text":"<p>2024-12-13</p> <ul> <li>Add support for skippy to Roborazzi tests. These can be invoked by <code>globalCiVerifyRoborazzi</code> and <code>ciVerifyRoborazzi</code> (per-project) tasks.</li> <li>Add support for defining common roborazzi dependency bundles via <code>common-roborazzi</code> key in version catalog bundles.</li> </ul>"},{"location":"changelog/#0235","title":"0.23.5","text":"<p>2024-12-12</p> <ul> <li>Don\u2019t apply checkDependencies in test projects\u2019 lint.</li> </ul>"},{"location":"changelog/#0234","title":"0.23.4","text":"<p>2024-12-11</p> <ul> <li>Non-GA supported languages properties can now be empty/optional.</li> </ul>"},{"location":"changelog/#0233","title":"0.23.3","text":"<p>2024-12-11</p> <ul> <li>Add blank behavior parameters to <code>PropertyResolver.optionalStringProvider</code> overloads to specify behavior for blank property values. Default behavior now is to error.</li> <li>Make supported language locales properties instead of string values.</li> <li>Make coroutines-core dep explicitly versioned in the skippy artifact.</li> <li>Update to OkHttp <code>5.0.0-alpha.14</code>.</li> </ul>"},{"location":"changelog/#0232","title":"0.23.2","text":"<p>2024-12-11</p> <ul> <li>Add <code>foundry.android.test.targetApkArch</code> property to specify a target architecture for androidTest APKs. This allows us to exclude jni libs from unmatched architectures to shrink APK size.</li> </ul>"},{"location":"changelog/#0231","title":"0.23.1","text":"<p>2024-12-11</p> <ul> <li>Make <code>foundry.android.test.compressWithLegacyPackaging</code> flag also apply to jniLibs compression.</li> </ul>"},{"location":"changelog/#0230","title":"0.23.0","text":"<p>2024-12-10</p> <ul> <li>New: Introduce <code>foundry.compose.global.stabilityConfigurationPath</code> to specify a global compose stability configuration file.</li> <li>New: Introduce <code>foundry.kotlin.explicitApiMode</code> to specify an explicit API mode for kotlin projects. Default is null. Values correspond to the <code>ExplicitApiMode</code> enum in KGP.</li> <li>Change: <code>foundry.compose.stabilityConfigurationPath</code> should now be relative from the project\u2019s directory, not the root project.</li> <li>Change: Use KGP 2.1.0+\u2019s new <code>KotlinBaseExtension</code> to configure most Kotlin compiler options.</li> <li>Change: <code>foundry.kotlin.allowWarningsInTests</code> now defaults to the value of <code>foundry.kotlin.allowWarnings</code>.</li> <li>New: Add a <code>foundry.android.test.compressWithLegacyPackaging</code> flag to compress androidTest APKs with legacy packaging.</li> <li>New: Support emulator.wtf for <code>androidTest()</code>. This feature is gated by the <code>foundry.emulatorwtf.enable</code> feature flag.</li> <li>Enhancement: Module topography validation now supports custom replacements for matching regexes.</li> <li>Update to Kotlin <code>2.1.0</code>.</li> <li>Update to Clikt <code>5.0.2</code>.</li> <li>Update to Kaml <code>0.66.0</code>.</li> <li>Update to RxJava <code>3.1.10</code>.</li> <li>Build against Gradle <code>8.11.1</code>.</li> <li>Build against KSP <code>2.1.0-1.0.29</code>.</li> <li>Build against Roborazzi <code>1.36.0</code>.</li> <li>Build against DAGP <code>2.6.0</code>.</li> <li>Build against AGP <code>8.7.3</code>.</li> <li>Build against redacted compiler plugin <code>1.11.0</code>.</li> </ul>"},{"location":"changelog/#0226","title":"0.22.6","text":"<p>2024-11-20</p> <ul> <li>[gradle] Make Robolectric jar downloads more dynamic for future-proofing. Will continue to work on improving this, but for now it should be possible to force a newer <code>org.robolectric:robolectric</code> version on your buildscript classpath to force a newer version and have it update JAR coordinates automatically.</li> </ul>"},{"location":"changelog/#0225","title":"0.22.5","text":"<p>2024-11-19</p> <ul> <li>[gradle] Make <code>LocTask.generatedSrcsDir</code> <code>@Internal</code> to avoid depending implicitly on outputs of tasks that sometimes only just make empty dirs with no files.</li> </ul>"},{"location":"changelog/#0224","title":"0.22.4","text":"<p>2024-11-15</p> <ul> <li>[gradle] Improve Detekt configuration to better ignore generated source files.</li> <li>[gradle] Add skippy support to validateModuleTopography. Now there are <code>globalCiValidateModuleTopography</code> and <code>ciValidateModuleTopography</code> tasks.</li> <li>[gradle] Use <code>mustRunAfter</code> for depending on source gen tasks + add back sqldelight\u2019s schema task as a source-generating task.</li> <li>[gradle] Improve compose matching text to include <code>.setContent {</code>.</li> <li>[gradle] Support custom configurations and overrides of ModuleTopography features via JSON file specified by the <code>foundry.topography.features.config</code> property.</li> <li>Update kaml to <code>0.65.0</code>.</li> <li>Build against develocity plugin <code>3.18.2</code>.</li> <li>Build against Roborazzi plugin <code>1.32.2</code>.</li> </ul>"},{"location":"changelog/#0223","title":"0.22.3","text":"<p>2024-11-13</p> <ul> <li>[gradle] Only make <code>LocTask</code> depend on source-generating tasks if <code>MODULE_SCORE_INCLUDE_GENERATED</code> is true.</li> </ul>"},{"location":"changelog/#0222","title":"0.22.2","text":"<p>2024-11-13</p> <ul> <li>[gradle] Fix dependencies on source-generating tasks in module stats and topography.</li> </ul>"},{"location":"changelog/#0221","title":"0.22.1","text":"<p>2024-11-12</p> <ul> <li>[gradle] Fix FoundryProperties hierarchical init.</li> </ul>"},{"location":"changelog/#0220","title":"0.22.0","text":"<p>2024-11-12</p> <ul> <li>[gradle] Introduce new <code>moduleTopography</code> task. This is a general task that attempts to validate project configurations by looking for features that are enabled but unused. Currently covers a few core features like kapt, ksp, moshi code gen, dagger/anvil, and viewbinding. Outputs are printed and written to a JSON file. Add <code>--validate-all</code> to make the tasks fail on validation issues.</li> <li>[gradle] Cache global <code>FoundryProperties</code> instance for subproject use.</li> <li>[gradle] Add <code>composeRuntimeOnly()</code> DSL feature.</li> <li>[cli] Check for non-existent paths before traversing in <code>Path.walkEachFile()</code>.</li> <li>[gradle] Don\u2019t depend on build sources in mod score if <code>MODULE_SCORE_INCLUDE_GENERATED</code> is false</li> <li>[gradle] Source module topography in mod score stats collecting</li> <li>[gradle] Build against Gradle <code>8.11</code>.</li> <li>[gradle] Do not track state in <code>RakeDependencies</code> task.</li> <li>Update to KotlinPoet <code>2.0.0</code>.</li> <li>Update to xmlutil <code>0.90.3</code>.</li> <li>Update to kaml <code>0.62.2</code>.</li> <li>Update to Mordant <code>3.0.1</code>.</li> <li>Build against gradle-dependency-sorter <code>0.12</code>.</li> <li>Build against KSP <code>2.0.21-1.0.27</code>.</li> <li>Build against DAGP <code>2.4.2</code>.</li> <li>Build against Compose Multiplatform <code>1.7.0</code>.</li> </ul>"},{"location":"changelog/#0210","title":"0.21.0","text":"<p>2024-10-25</p> <ul> <li>New: Extract <code>better-gradle-properties</code> artifact, which is our hierarchical Gradle properties solution that better handles properties in Gradle. This is what powers <code>FoundryProperties</code> but is now extracted to be more portable.</li> <li>This checks in the following order of priority<ul> <li>project-local <code>local.properties</code></li> <li>project-local <code>gradle.properties</code></li> <li>root-project <code>local.properties</code></li> <li>root-project/global <code>gradle.properties</code></li> </ul> </li> <li>New: Extract <code>version-number</code> artifact. This contains a Kotlin, non-deprecated <code>VersionNumber</code> API. This is useful given that Gradle\u2019s is both deprecated and not available in standard JVM projects.</li> <li>New: Support Robolectric 4.14.</li> <li>Changed: Remove defunct <code>foundry.git.hooksPath</code> and <code>foundry.git.ignoreRevsFile</code> properties.</li> <li>Changed: Rename <code>SgpArtifact</code> to <code>FoundryArtifact</code>.</li> <li>Misc doc fixes + reorganize docsite around new repo structure.</li> <li>Update xmlutil to <code>0.90.2</code>.</li> <li>Build against Spotless <code>7.0.0.BETA4</code>.</li> <li>Build against KSP <code>2.0.21-1.0.26</code>.</li> <li>Build against DAGP <code>2.2.0</code>.</li> <li>Build against nullaway-gradle <code>2.1.0</code>.</li> <li>Build against errorprone-gradle <code>4.1.0</code>.</li> <li>Build against Compose multiplatform <code>1.7.0</code>.</li> <li>Build against Dokka <code>2.0.0-Beta</code>.</li> </ul>"},{"location":"changelog/#0202","title":"0.20.2","text":"<p>2024-10-14</p> <ul> <li>Fix: Fall back to old property name for kotlin JVM args if the new one isn\u2019t found.</li> <li>Enhancement: Don\u2019t try to apply kotlin JVM args if there are none.</li> </ul>"},{"location":"changelog/#0201","title":"0.20.1","text":"<p>2024-10-14</p> <p>Don\u2019t use this release! We goofed on something.</p>"},{"location":"changelog/#0200","title":"0.20.0","text":"<p>2024-10-11</p>"},{"location":"changelog/#project-restructuring","title":"Project Restructuring","text":"<p>We\u2019ve restructured this project! Since its early days as a simple Gradle convention plugin it\u2019s expanded into IntelliJ plugins, CLIs, CI tooling, and more. To better capture this, we\u2019ve renamed the project to Foundry, restructured its artifacts into a more cohesive setup, moved kotlin-cli-util into this repo, and will likely split out some more artifacts down the line.</p>"},{"location":"changelog/#migration-guide","title":"Migration Guide","text":"<ul> <li>Any gradle properties prefixed with <code>slack.</code> or <code>sgp.</code> have now moved to <code>foundry.</code>. <code>slack.gradle.</code> prefix have also removed the <code>gradle.</code> (i.e. <code>slack.gradle.foo</code> would now be <code>foundry.foo</code>).</li> <li><code>SlackProperties</code> has been renamed to <code>FoundryProperties</code>.</li> <li>Some properties have been further refined to be more specific.</li> <li> <p>There is a helper script you can use to automatically rename all properties in <code>foundry-migration/</code>.</p> <ul> <li>Download <code>mapping.txt</code></li> <li>Download <code>property_migration.sh</code></li> <li>Run <code>./property_migration.sh mapping.txt &lt;path to target project&gt;</code>.</li> <li>Note this only covers <code>*.kts</code> and <code>*.properties</code> files. This does not cover args passed via CLI or envs.</li> </ul> </li> <li> <p>Package names have all aligned to <code>foundry.*</code>. In most cases it should be simple enough to replace <code>import com.slack.*</code> with <code>import foundry.*</code>.</p> </li> <li> <p>Gradle coordinates group have moved to the <code>com.slack.foundry</code> group name.</p> Old Artifact ID New Artifact ID sgp gradle-plugin sgp-agp-handler-api agp-handler-api sgp-common foundry-common sgp-tracing tracing skippy skippy </li> <li> <p>The former <code>kotlin-cli-util</code> APIs have moved to the <code>com.slack.foundry:cli</code> artifact.</p> </li> <li>Platform-specific plugins now live under the <code>platforms/</code> directory.</li> <li>All other tools now live under the <code>tools/</code> directory.</li> <li>Most top-level <code>Slack</code>-prefixed APIs are now prefixed with <code>Foundry</code>.</li> <li>The primary gradle entry points are now <code>foundry {}</code>, but the previous <code>slack {}</code> entry points are left with deprecation <code>ReplaceWith</code> options.</li> <li> <p>Gradle plugin IDs have migrated to <code>com.slack.foundry.*</code> names.</p> Old New <code>com.slack.gradle.root</code> <code>com.slack.foundry.root</code> <code>com.slack.gradle.base</code> <code>com.slack.foundry.base</code> <code>com.slack.gradle.apk-versioning</code> <code>com.slack.foundry.apk-versioning</code> </li> <li> <p>Introduce new required <code>foundry.android.defaultNamespacePrefix</code> property for android projects. This is necessary for projects that don\u2019t define an <code>android.namespace</code> explicitly.</p> </li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>New: Make JDK configuration docs and error messages configurable via <code>FoundryProperties</code>.</li> <li>Fix: Gracefully handle undefined kapt language versions when computing <code>progressive</code>.</li> <li>Fix: Track deleted build files when computing parent projects in Skippy.</li> <li>Update Clikt to <code>5.0.1</code>.</li> <li>Update oshi-core to <code>6.6.5</code>.</li> <li>Build against DAGP 2.x.</li> <li>Build against gradle-error-prone <code>4.0.1</code>.</li> <li>Build against gradle-nullaway <code>2.0.0</code>.</li> <li>Build against Gradle versions plugin <code>0.51.0</code>.</li> <li>Build against Develocity plugin <code>3.18.1</code>.</li> </ul>"},{"location":"changelog/#0196","title":"0.19.6","text":"<p>2024-09-25</p> <ul> <li>Intro <code>SoftRefLRUPolicyMSPerMB</code> + <code>ReservedCodeCacheSize</code> jvm args to bootstrap</li> <li>Learnings from https://jasonpearson.dev/codecache-in-jvm-builds and https://jasonpearson.dev/softreflrupolicymspermb-in-jvm-builds.</li> <li>Update kotlin-cli-util to <code>3.0.1</code>.</li> <li>Update to Guava <code>33.3.1-jre</code>.</li> <li>Build against Gradle <code>8.10.2</code>.</li> </ul>"},{"location":"changelog/#0195","title":"0.19.5","text":"<p>2024-09-23</p> <ul> <li>Add workaround for KGP not applying <code>sourceInformation</code> compose options in android projects and default it to true.</li> </ul>"},{"location":"changelog/#0194","title":"0.19.4","text":"<p>2024-09-22</p> <ul> <li>Change <code>slack.allowWarnings</code> property to <code>sgp.kotlin.allowWarnings</code>.</li> <li>Disallow warnings in Kotlin test compilations by default, add <code>sgp.kotlin.allowWarningsInTests</code> property to opt-out.</li> <li>Update to kotlinx-coroutines <code>1.9.0</code>.</li> <li>Update Okio to <code>3.9.1</code>.</li> <li>Update to Clikt <code>5.0.0</code>.</li> <li>Update JNA to <code>5.15.0</code>.</li> <li>Update oshi-core to <code>6.6.4</code>.</li> <li>Update kotlin-cli-util to <code>3.0.0</code>.</li> <li>Build against AGP <code>8.6.1</code>.</li> </ul>"},{"location":"changelog/#0193","title":"0.19.3","text":"<p>2024-09-12</p> <ul> <li>Change: Rename <code>testFixtures()</code> feature DSL to <code>enableTestFixtures()</code> to disambiguate from Gradle\u2019s methods.</li> <li>New: Introduce new <code>sgp.compose.stabilityConfigurationPath</code> property to specify a Compose configuration file path from the root project. It is also now disallowed to specify this via <code>sgp.compose.commonCompilerOptions</code>.</li> </ul>"},{"location":"changelog/#0192","title":"0.19.2","text":"<p>2024-09-12</p> <ul> <li>[sgp] New: Add new <code>slack { features { testFixtures() } }</code> DSL for enabling test fixtures in a project-agnostic way.</li> <li>[sgp] Make <code>slack.location.robolectric-core</code> property optional.</li> <li>[sgp] Clean up duplicate Kotlin JVM argument handling in <code>KaptGenerateStubsTask</code>.</li> <li>[sgp] Update to the new compose-compiler-gradle-plugin feature flag API.</li> <li>[sgp] Apply platform project BOMs to SqlDelight <code>DialectClasspath</code> configurations too.</li> <li>[sgp] Build against KSP <code>2.0.20-1.0.25</code>.</li> <li>[sgp] Build against AGP <code>8.6.0</code>.</li> <li>[sgp] Build against Gradle <code>8.10.1</code>.</li> <li>[sgp] Build against Wire <code>5.1.0</code>.</li> <li>[skippy] Don\u2019t treat testFixtures as test sources</li> </ul>"},{"location":"changelog/#0191","title":"0.19.1","text":"<p>2024-09-03</p> <ul> <li>Add <code>slack.bootstrap.minGradleXms</code> property to set minimum xms values for daemon memory args.</li> <li>Apply <code>slack.boostrap.minGradleXm*</code> values to kotlin daemon jvm args too.</li> <li>Remove MaxMetaspace caps from bootstrap. This shouldn\u2019t be set anymore in JDK 17+.</li> <li>Update develocity-gradle-plugin-adapters to <code>1.0.4</code>.</li> <li>Update Bugsnag to <code>3.7.2</code>.</li> <li>Build against AGP <code>8.6.0</code>.</li> </ul>"},{"location":"changelog/#0190","title":"0.19.0","text":"<p>2024-08-27</p> <ul> <li>Improve KGP plugin handling to better support upcoming AGP kotlin compilation.</li> <li>Build with JDK 22. Still targets JVM 17.</li> <li>Update MoshiX to <code>0.28.0</code>.</li> <li>Update RxJava to <code>3.1.9</code>.</li> <li>Update Oshi to <code>6.6.3</code>.</li> <li>Revert dependency sorter back to <code>0.7</code>.</li> <li>Build against Kotlin <code>2.0.20</code>.</li> <li>Build against redacted-compiler-plugin <code>1.10.0</code>.</li> <li>Build against KSP <code>2.0.20-1.0.24</code>.</li> <li>Build against Gradle <code>8.10</code>.</li> </ul>"},{"location":"changelog/#0184","title":"0.18.4","text":"<p>2024-08-12</p> <ul> <li>Add <code>sgp.kapt.languageVersion</code> property to override the language version used for KAPT.</li> <li>Build against Kotlin <code>2.0.10</code>.</li> <li>Build against KSP <code>2.0.10-1.0.24</code>.</li> <li>Build against AGP <code>8.5.2</code>.</li> </ul>"},{"location":"changelog/#0183","title":"0.18.3","text":"<p>2024-08-04</p> <ul> <li>Add support for changing Anvil implementations.</li> </ul>"},{"location":"changelog/#0182","title":"0.18.2","text":"<p>2024-07-31</p> <ul> <li>Fix applying free compiler args from Gradle properties.</li> <li>Gate disabling compose live literals on relevant AGP versions. This is deprecated in new AGP versions.</li> <li>Remove a noisy log.</li> <li>Streamline dagger ksp handling + remove napt support.</li> <li>Update Kaml to <code>0.61.0</code>.</li> <li>Update Oshi to <code>6.6.2</code>.</li> <li>Build against DAGP <code>1.33.0</code>.</li> <li>Build against KSP <code>2.0.0-1.0.24</code>.</li> <li>Build against Anvil <code>2.5.0-beta11</code>.</li> </ul>"},{"location":"changelog/#0181","title":"0.18.1","text":"<p>2024-07-19</p> <ul> <li>Fix: Fix circular evaluation dependency for <code>jvmTarget</code>.</li> <li>Remove Kover Workaround for <code>0.7.1</code>.</li> <li>Turn off xml report generation for lint task.</li> <li>Update KotlinPoet to <code>1.18.1</code>.</li> <li>Update Wire to <code>5.0.0</code>.</li> <li>Update MoshiX to <code>0.27.2</code>.</li> <li>Build against Gradle <code>8.9</code>.</li> <li>Build against KSP <code>2.0.0-1.0.23</code>.</li> <li>Build against AGP <code>8.5.1</code>.</li> <li>Build against sort-dependencies <code>0.7</code>.</li> </ul>"},{"location":"changelog/#0172","title":"0.17.2","text":"<p>2024-05-28</p> <ul> <li>Make default Kotlin compiler arguments more configurable. This includes removing some previously-default behavior.</li> <li><code>sgp.kotlin.languageVersionOverride</code>. Default is null, which will just defer to KGP\u2019s default.</li> <li><code>sgp.kotlin.optIns</code><ul> <li>Previous default opt-ins = <code>kotlin.contracts.ExperimentalContracts</code>, <code>kotlin.experimental.ExperimentalTypeInference</code>, <code>kotlin.ExperimentalStdlibApi</code>, <code>kotlin.time.ExperimentalTime</code></li> </ul> </li> <li><code>sgp.kotlin.freeArgs</code><ul> <li>Previous default free args = <code>-Xenhance-type-parameter-types-to-def-not-null</code>, <code>-Xself-upper-bound-inference</code></li> </ul> </li> <li><code>sgp.kotlin.jvmFreeArgs</code><ul> <li>Previous default JVM free args = <code>-Xjsr305=strict</code>, <code>-Xassertions=jvm</code>, <code>-Xemit-jvm-type-annotations</code>, <code>-Xjvm-default=all</code>, <code>-Xtype-enhancement-improvements-strict-mode</code>, <code>-Xjspecify-annotations=strict</code></li> </ul> </li> <li><code>sgp.kotlin.progressive</code>. Default is true.</li> <li>Build against AGP <code>8.5.0</code>.</li> <li>Build against DAGP <code>1.32.0</code>.</li> <li>Build against Compose Multiplatform <code>1.6.11</code>.</li> <li>Update to Kaml <code>0.60.0</code>.</li> <li>Update to Guava <code>33.2.1-jre</code>.</li> <li>Update to MoshiX <code>0.27.1</code>.</li> </ul>"},{"location":"changelog/#0171","title":"0.17.1","text":"<p>2024-05-28</p> <ul> <li>Build against Kotlin <code>2.0.0</code>.</li> <li>Build against KSP <code>2.0.0-1.0.21</code>.</li> <li>Build against AGP <code>8.4.1</code>.</li> </ul>"},{"location":"changelog/#0170","title":"0.17.0","text":"<p>2024-04-30</p> <ul> <li>Build against AGP <code>8.4.0</code>.</li> <li>Update Clikt to <code>4.4.0</code>.</li> </ul>"},{"location":"changelog/#0164","title":"0.16.4","text":"<p>2024-04-26</p> <ul> <li>Add new flag + logic to relocate project build directories #827.</li> <li>Update to develocity plugin\u2019s <code>retry</code> extension.</li> <li>Build against redacted compiler plugin <code>1.8.1</code>.</li> <li>Update to Kaml <code>0.59.0</code>.</li> </ul>"},{"location":"changelog/#0163","title":"0.16.3","text":"<p>2024-04-18</p> <ul> <li>Migrate to Develocity (3.17) for build scan reporting. Technically legacy Gradle Enterprise APIs should still work, but we\u2019re not intentionally supporting them anymore.</li> <li>Build against Anvil <code>2.5.0-beta07</code>.</li> <li>Update commons-text to <code>1.12.0</code>.</li> <li>Update oshi to <code>6.6.0</code>.</li> <li>Build against DAGP <code>1.31.0</code>.</li> <li>Build against Compose Multiplatform <code>1.6.2</code>.</li> <li>Build against AGP <code>8.3.2</code>.</li> <li>Build against KSP <code>1.9.23-1.0.20</code>.</li> <li>Build against SqlDelight <code>2.0.2</code>.</li> <li>Update to Wire <code>4.9.9</code>.</li> <li>Update to Clikt <code>4.3.0</code>.</li> </ul>"},{"location":"changelog/#0162","title":"0.16.2","text":"<p>2024-03-28</p> <ul> <li>Work around https://issuetracker.google.com/issues/331806519 when using KSP in android projects.</li> <li>Build against AGP <code>8.3.1</code>.</li> <li>Build against Detekt <code>1.23.6</code>.</li> <li>Build against Gradle <code>8.7</code>.</li> <li>Update Retrofit to <code>2.11.0</code>.</li> <li>Update Kaml to <code>0.58.0</code>.</li> <li>Update Wire to <code>4.9.8</code>.</li> <li>Update Guava to <code>33.1.0-jre</code>.</li> </ul>"},{"location":"changelog/#0161","title":"0.16.1","text":"<p>2024-03-14</p> <ul> <li>Only apply <code>-Xjdk-release</code> on jvm compilations (not android).</li> </ul>"},{"location":"changelog/#0160","title":"0.16.0","text":"<p>2024-03-14</p> <ul> <li>New: Add support for Anvil\u2019s new KSP support via Anvil <code>2.5.0-beta04</code>.</li> <li>Incorporate Kotlin\u2019s <code>-Xjdk-release</code> option alongside <code>jvmTarget</code>.</li> <li>Fix configuration cache when setting kotlin compilation module name.</li> <li>Update Okio to <code>3.9.0</code>.</li> <li>Update Oshi to <code>6.5.0</code>.</li> <li>Build against Kotlin <code>1.9.23</code>.</li> <li>Build against KSP <code>1.9.23-1.0.19</code>.</li> <li>Build against Compose Multiplatform <code>1.6.1</code>.</li> </ul>"},{"location":"changelog/#0159","title":"0.15.9","text":"<p>2024-03-08</p> <ul> <li>New: Add property to override lint version from version catalogs.</li> <li>Fix: Fix application of common compose options.</li> </ul>"},{"location":"changelog/#0158","title":"0.15.8","text":"<p>2024-03-04</p> <ul> <li>Fix: Check for <code>com.android.test</code> in <code>Project.isAndroid</code> checks. This resolves a case where we accidentally set the <code>JavaCompile.options.release</code> property in those projects.</li> </ul>"},{"location":"changelog/#0157","title":"0.15.7","text":"<p>2024-02-28</p> <ul> <li>Fix inverted logic for disabled anvil mode in K2/KSP testing.</li> </ul>"},{"location":"changelog/#0156","title":"0.15.6","text":"<p>2024-02-28</p> <ul> <li>Fix <code>AnvilMode</code> casing in detection.</li> </ul>"},{"location":"changelog/#0155","title":"0.15.5","text":"<p>2024-02-27</p> <ul> <li>Broaden anvil KSP support controls.</li> <li>Update oshi to <code>6.4.13</code>.</li> <li>Add <code>sgp.compose.commonCompilerOptions</code> property for common compose compiler options.</li> <li>Build against Compose Multiplatform <code>1.6.0</code>.</li> <li>Fix mkdocs lists on the main page.</li> </ul>"},{"location":"changelog/#0154","title":"0.15.4","text":"<p>2024-02-19</p> <ul> <li>Remove <code>-Xproper-ieee754-comparisons</code> arg, as it\u2019s enabled by default and removed entirely in K2.</li> <li>Small fixes around skippy + add inverse options to boolean options.</li> <li>Update Okio to <code>3.8.0</code>.</li> <li>Update Oshi to <code>6.4.12</code>.</li> <li>Update coroutines to <code>1.8.0</code>.</li> <li>Build against DAGP <code>1.30.0</code>.</li> <li>Build against AGP <code>8.3.0-rc01</code>.</li> </ul>"},{"location":"changelog/#0153","title":"0.15.3","text":"<p>2024-02-03</p> <ul> <li>Support Gradle 8.6.</li> <li>Use new lazier <code>TaskCollection.named(Spec)</code> APIs where appropriate.</li> <li>Update to Moshi <code>1.15.1</code>.</li> <li>Update to kotlin-cli-util <code>2.6.3</code>.</li> <li>Update to oshi <code>6.4.11</code>.</li> <li>Build against AGP <code>8.2.2</code>.</li> <li>Build against Kotlin <code>1.9.22</code>.</li> <li>Build against KSP <code>1.9.22-1.0.17</code>.</li> <li>Build against Detekt <code>1.23.5</code>.</li> <li>Build against Compose Multiplatform <code>1.5.12</code>.</li> <li>Build against DAGP <code>1.29.0</code>.</li> <li>Build against Spotless <code>6.25.0</code>.</li> </ul>"},{"location":"changelog/#0152","title":"0.15.2","text":"<p>2024-01-11</p> <ul> <li>New: Promote <code>PropertyResolver</code> to public API.</li> <li>New: Skippy logic is now distributed as a separate, non-gradle-specific artifact under <code>com.slack.gradle:skippy</code>. This also includes a CLI that can be run as an alternative to the gradle task. Note this requires serialized dependency graph and androidTest projects to be pre-computed. THe config must be in a static JSON file. See the docs on <code>ComputeAffectedProjectsCli</code>.</li> </ul> <p><pre><code>Usage: compute-affected-projects-cli [&lt;options&gt;]\n\n  Computes affected projects and writes output files to an output directory.\n\nOptions:\n  --debug                    Enable debug logging.\n  --merge-outputs            Merge outputs from all configs into a single\n                             /merged dir.\n  --config=&lt;path&gt;            Path to a config file that contains a mapping of\n                             tool names to SkippyConfig objects.\n  --parallel                 Compute affected projects in parallel.\n  --changed-files=&lt;path&gt;     A relative (to the repo root) path to a\n                             changed_files.txt that contains a\n                             newline-delimited list of changed files. This is\n                             usually computed from a GitHub PR's changed files.\n  -o, --outputs-dir=&lt;path&gt;   Output directory for skippy outputs.\n  --root-dir=&lt;path&gt;          Root repo directory. Used to compute relative\n                             paths.\n  --dependency-graph=&lt;path&gt;  Path to a serialized dependency graph file.\n  --android-test-project-paths=&lt;path&gt;\n                             Path to a file that contains a newline-delimited\n                             list of project paths that produce androidTest\n                             APKs.\n  -h, --help                 Show this message and exit\n</code></pre> - Enhancement: Split out separate cacheable <code>generateDependencyGraph</code> and <code>generateAndroidTestProjects</code> tasks from <code>ComputeAffectedProjectsTask</code>. This allows for more fine-grained caching and parallelization.</p> <p>An example flow of the last two bullets can look like so:</p> <pre><code># Generate the dependency graph and androidTest projects\n./gradlew generateDependencyGraph generateAndroidTestProjectPaths\n\n# Run the CLI, such as from a `*.main.kts` file that imports it.\n./skippy-runner.main.kts \\\n    --changed-files changed_files.txt \\\n    --dependency-graph slack/dependencyGraph/serializedGraph.bin \\\n    --android-test-project-paths slack/androidTestProjectPaths/paths.txt \\\n    ...\n</code></pre>"},{"location":"changelog/#0151","title":"0.15.1","text":"<p>2024-01-09</p> <ul> <li>Misc small fixes to the new artifact publishing internals released in 0.15.0.</li> </ul>"},{"location":"changelog/#0150","title":"0.15.0","text":"<p>2024-01-02</p> <ul> <li>Enhancement: We\u2019ve reworked the internals of SGP significantly to make it more compatible with Gradle Project Isolation. This affects Skippy, ModScore, AndroidTest APK aggregation, DAGP missing identifiers, and property resolution (specifically command line properties and <code>local.properties</code>). Note that this work is ongoing as project isolation is incubating, but the changes in this release should be non-functional in nature.</li> <li>Build against Kotlin <code>1.9.22</code>.</li> <li>Build against KSP <code>1.9.22-1.0.16</code>.</li> <li>Build against AGP <code>8.2.1</code>.</li> <li>Build against AGP <code>8.3.0-beta01</code> in AgpHandler83.</li> <li>Build against maven-publish <code>0.26.0</code>.</li> <li>Update to Guava <code>33.0.0-jre</code>.</li> <li>Update to Oshi <code>6.4.10</code>.</li> <li>Update to kotlin-cli-util <code>2.6.0</code>.</li> </ul>"},{"location":"changelog/#0142","title":"0.14.2","text":"<p>2023-12-18</p> <ul> <li>Make <code>compose()</code> DSL function with Action parameter public.</li> </ul>"},{"location":"changelog/#0141","title":"0.14.1","text":"<p>2023-12-18</p> <ul> <li>Expose <code>compilerOption()</code> API in Compose DSL for compiler arg configuration.</li> <li>Update to DAGP <code>1.28.0</code> + migrate off deprecated APIs.</li> <li>Update Okio to <code>3.7.0</code>.</li> <li>Update AgpHandler 8.3 to <code>8.3.0-alpha18</code>.</li> <li>Build against KSP <code>1.9.21-1.0.16</code>.</li> </ul>"},{"location":"changelog/#0140","title":"0.14.0","text":"<p>2023-12-12</p> <ul> <li>Support granular Skippy configuration. Now each tool can be configured independently with both global and per-tool configuration. These are controlled via public <code>skippy</code> extension now. These outputs and diagnostics are stored at <code>build/skippy/{tool}/...</code>. Merged outputs can be generated as well to <code>build/skippy/merged</code>. This allows for creating dynamic pipelines based on the outputs of each tool. The global config is always overlaid onto each tool-specific config.</li> </ul> <pre><code>skippy {\n  debug.set(true)\n  mergeOutputs.set(true)\n  computeInParallel.set(true)\n  global {\n    applyDefaults()\n    // Glob patterns of files to include in computing\n    includePatterns.addAll(\n      \"**/*.pro\",\n      \"**/src/**/sqldelight/**\",\n    )\n    excludePatterns.addAll(\".idea/**/*.kt\")\n    // Glob patterns of files that, if changed, should result in not skipping anything in the build\n    neverSkipPatterns.addAll(\n      \".buildkite/**\",\n      \".github/actions/**\",\n      \"ci/**\",\n      \"config/health-score/**\",\n      \"tooling/scripts/**\",\n    )\n  }\n  config(\"lint\") {\n    includePatterns.addAll(\n      // project-local lint.xml files\n      // this doesn't fuuuuully work with skippy because these layer like .gitignore does\n      \"**/lint.xml\",\n      // Lint baselines\n      \"**/lint-baseline.xml\",\n    )\n    neverSkipPatterns.addAll(\n      // Global lint config\n      \"config/lint/lint.xml\",\n      // Houston feature flags, which is an input to our feature flags lints\n      \"config/feature-flags/experiments.txt\",\n    )\n  }\n  config(\"detekt\") {\n    // Detekt baselines\n    includePatterns.add(\"**/detekt-baseline.xml\")\n    // Global detekt configs\n    neverSkipPatterns.add(\"config/detekt/*\")\n  }\n}\n</code></pre> <ul> <li>Update Kotlin language version to <code>1.9</code>.</li> <li>Upgrade away from deprecated CC API check.</li> <li>Update to okio <code>3.6.0</code></li> <li>Update to oshi <code>6.4.9</code></li> <li>Update to JNA <code>5.14.0</code></li> <li>Update to kotlin-cli-util <code>2.5.4</code></li> <li>Build against AGP <code>8.3.0-alpha17</code> in AgpHandler 8.3 artifact.</li> <li>Build against DAGP <code>1.27.0</code>.</li> </ul>"},{"location":"changelog/#0131","title":"0.13.1","text":"<p>2023-12-05</p> <ul> <li>Make <code>Project.isSyncing</code> public.</li> <li>Update to new <code>android.studio.version</code> property for reporting to build scans.</li> <li>Update to Wire <code>4.9.3</code>.</li> <li>Update to RxJava <code>3.1.8</code>.</li> <li>Build against Kotlin <code>1.9.21</code>.</li> <li>Build against KSP <code>1.9.21-1.0.15</code>.</li> <li>Build against MoshiX <code>0.25.1</code>.</li> <li>Build against AGP <code>8.2.0</code>.</li> <li>Build against SqlDelight <code>2.0.1</code>.</li> <li>Build against Redacted Compiler Plugin <code>1.7.1</code>.</li> <li>Build against Detekt <code>1.23.4</code>.</li> <li>Build against Gradle Doctor <code>0.9.1</code>.</li> </ul>"},{"location":"changelog/#0130","title":"0.13.0","text":"<p>2023-11-30</p> <ul> <li>Update to Gradle 8.5. This version requires Gradle 8.5+.</li> <li>Report Gradle 8.5\u2019s new <code>BuildFeatures</code> to build scans as custom values, starting with configuration cache and isolated projects.</li> <li>Update Guava to <code>32.1.3-jre</code>.</li> <li>Update Oshi to <code>6.4.8</code>.</li> <li>Build against AGP <code>8.1.4</code> (main) and <code>8.3.0-alpha15</code> (agp handler 8.3).</li> <li>Build against compose multipaltform <code>1.5.11</code>.</li> <li>Include source links in Dokka docs.</li> </ul>"},{"location":"changelog/#0121","title":"0.12.1","text":"<p>2023-11-21</p> <ul> <li>Fix circuit() extension code gen using the wrong configuration.</li> </ul>"},{"location":"changelog/#0120","title":"0.12.0","text":"<p>2023-11-20</p> <ul> <li>New: Add a <code>SlackExtension.circuit()</code> DSL. This makes it easy to set up Circuit in a project. See the DSL docs for more details.   <pre><code>slack {\n  features {\n    circuit()\n  }\n}\n</code></pre></li> <li>Don\u2019t configure <code>KspTask</code> subtypes of <code>KotlinCompile</code> tasks.</li> <li>Remove <code>autoValue()</code> APIs from <code>SlackExtension</code>.</li> <li>Fix deprecated forkEvery call.</li> </ul>"},{"location":"changelog/#0117","title":"0.11.7","text":"<p>2023-11-10</p> <ul> <li>Make AGP version resolution lazy in AgpHandlers.</li> </ul>"},{"location":"changelog/#0116","title":"0.11.6","text":"<p>2023-11-09</p> <ul> <li>Explicitly set <code>Detekt.baseline</code> to null if we don\u2019t specify one, as we don\u2019t want it to fall back to its default location.</li> </ul>"},{"location":"changelog/#0115","title":"0.11.5","text":"<p>2023-11-09</p> <ul> <li>Support AGP <code>8.3.0-alpha13</code>.</li> </ul>"},{"location":"changelog/#0114","title":"0.11.4","text":"<p>2023-11-08</p> <ul> <li>Detekt baselines are now generated into their corresponding projects. This matches how we handle lint baselines, and global baselines are no longer supported.</li> <li>You do now need to specify a <code>slack.detekt.baseline-file-name</code> property to indicate what the simple file name should be. This is evaluated against <code>project.layout.projectDirectory.file(...)</code>. This replaces the previous <code>slack.detekt.baseline</code> property.</li> <li>Build against Kotlin <code>1.9.20</code>.</li> <li>Build against AGP <code>8.1.3</code>.</li> <li>Build against Compose Multiplatform <code>1.5.10</code>.</li> </ul>"},{"location":"changelog/#0113","title":"0.11.3","text":"<p>2023-11-02</p> <ul> <li>Support Robolectric 4.11 jars for Android API 34.</li> </ul>"},{"location":"changelog/#0112","title":"0.11.2","text":"<p>2023-10-30</p> <ul> <li>Make detekt and lint baselines default to <code>null</code> if their property values are blank.</li> <li>No longer publish monkeypatch artifact as it\u2019s no longer necessary.</li> </ul>"},{"location":"changelog/#0111","title":"0.11.1","text":"<p>2023-10-22</p> <ul> <li>Add new <code>sgp.isTestLibrary</code> property to indicate if a library is a test library. Note that projects that are named <code>test-fixtures</code> are implicitly considered test libraries.</li> <li>Fix: Don\u2019t impose <code>VisibleForTests</code> lint on test libraries.</li> </ul>"},{"location":"changelog/#0110","title":"0.11.0","text":"<p>2023-10-22</p> <ul> <li>Revamp some lint configuration and best-effort support KMP projects.</li> <li>Remove <code>slack.lint.update-baselines</code> property in favor of AGP\u2019s modern <code>updateBaselines</code> task.</li> <li>Remove hidden <code>ImplicitSamInstance</code> lint config.</li> <li>Disable newer issues for dependency checks.</li> </ul>"},{"location":"changelog/#01011","title":"0.10.11","text":"<p>2023-10-19</p> <ul> <li>Support AGP <code>8.3.0-alpha08</code>.</li> <li>Build against Gradle <code>8.4</code>.</li> <li>Build against compose-multiplatform <code>1.5.3</code>.</li> </ul>"},{"location":"changelog/#01010","title":"0.10.10","text":"<p>2023-10-02</p> <ul> <li>Make debug builds everywhere (local and CI) use consistent version codes and version names. This way remote build cache entries for them are compatible.</li> <li>Default debug version code is governed by <code>slack.gradle.debugVersionCode</code> and defaults to <code>90009999</code>.</li> <li>Default version name user suffix is governed by <code>slack.gradle.debugUserString</code> and defaults to <code>debug</code>.</li> <li>Non-debug build types are the same as before.</li> <li>Remove a noisy lifecycle log around lint variant selection.</li> <li>Build against Bugsnag Gradle Plugin <code>8.1.0</code>.</li> </ul>"},{"location":"changelog/#0109","title":"0.10.9","text":"<p>2023-09-28</p> <ul> <li>Don\u2019t disable caching on MergeAssets tasks by default. Leave that to consuming repos.</li> <li>Update permission allowlist API to use a <code>allowListFile</code> file property instead.</li> <li>Don\u2019t exclude coroutines\u2019 debug probes in debug build packaging.</li> <li>Support AGP 8.3.0-alpha05+.</li> <li>Build against Wire <code>4.9.1</code>.</li> <li>Build against Compose Multiplatform <code>1.5.2</code>.</li> <li>Update to Oshi <code>6.4.6</code>.</li> </ul>"},{"location":"changelog/#0108","title":"0.10.8","text":"<p>2023-09-22</p> <ul> <li>Fix: Don\u2019t apply boms to the <code>coreLibraryDesugaring</code> configuration.</li> <li>Enhancement: Set Kotlin <code>compilerOptions.moduleName</code> to a dashified version of the Gradle project path.</li> <li>Update MoshiX to <code>0.24.3</code></li> <li>Compile against Anvil <code>2.4.8</code>.</li> <li>Compile against CM <code>1.5.1</code>.</li> <li>Compile against DAGP <code>1.22.0</code>.</li> <li>Compile against redacted-compiler-plugin <code>1.6.1</code>.</li> </ul>"},{"location":"changelog/#0107","title":"0.10.7","text":"<p>2023-08-29</p> <ul> <li>Fix: Don\u2019t apply BOMs to testApi configurations.</li> </ul>"},{"location":"changelog/#0106","title":"0.10.6","text":"<p>2023-08-29</p> <ul> <li>New: Publish a generic Tracing API under the <code>sgp-tracing</code> artifact ID. We use this internally to collect extra build metadata, but it\u2019s generic enough for general use. Not currently used in slack-plugin yet.</li> <li>Add <code>sgp.android.buildToolsVersionOverride</code> property to override the default build tools version in Android.</li> <li>Migrate to <code>AndroidPluginVersion</code> API in <code>AgpHandler</code>.</li> <li>Fix a few more deprecated Gradle API usages.</li> <li>Build against AGP <code>8.1.1</code>.</li> <li>Build against Spotless <code>6.21.0</code>.</li> <li>Build against Compose Multiplatform <code>1.5.0</code>.</li> <li>Update to Kotlin <code>1.9.10</code>.</li> <li>Update to KSP <code>1.9.10-1.0.13</code>.</li> <li>Update to RxJava <code>3.1.7</code>.</li> <li>Update to kotlin-cli-util <code>2.2.1</code>.</li> <li>Update to Oshi <code>6.4.5</code>.</li> <li>Update to Wire <code>4.8.1</code></li> <li>Update to DAGP <code>1.21.0</code>.</li> <li>Update to Gradle <code>8.3</code>.</li> </ul>"},{"location":"changelog/#0105","title":"0.10.5","text":"<p>2023-08-15</p> <ul> <li>Fix: Better support <code>com.android.test</code> projects in a few ways</li> <li>No longer apply lint configurations as they don\u2019t support them.</li> <li>No longer apply DAGP as it doesn\u2019t support them yet.</li> <li>No longer apply unit test configurations as they don\u2019t have unit tests.</li> <li>Build against Gradle 8.3 + fix a few deprecated <code>Project.buildDir</code> API usages.</li> <li>Update <code>kotlin-cli-util</code> to <code>2.1.0</code>.</li> </ul>"},{"location":"changelog/#0104","title":"0.10.4","text":"<p>2023-08-10</p> <ul> <li>New: New DSL API for enabling Android resources.</li> </ul> <p>This streamlines configuration of enabling <code>androidResources</code> and enforces use of a resource prefix to avoid conflicts.</p> <p>May your avatars never be wrongly sized again.</p> <pre><code>slack {\n  android {\n    features {\n      resources(\"prefix_\")\n    }\n  }\n}\n</code></pre> <ul> <li>Update kotlin-cli-util to <code>2.0.0</code>.</li> <li>Update Moshi to <code>1.15.0</code>.</li> <li>Update sort-dependencies to <code>0.4</code>.</li> <li>Update KSP to <code>1.9.0-1.0.13</code>.</li> <li>Update Okio to <code>3.5.0</code>.</li> <li>Update Jetbrains Markdown to <code>0.5.0</code>.</li> </ul>"},{"location":"changelog/#0103","title":"0.10.3","text":"<p>2023-08-08</p> <ul> <li>Fix an issue with Skippy where we would accidentally mark all library projects as affected androidTest projects even if they didn\u2019t have androidTest enabled.</li> <li>Update Guava to <code>32.1.2-jre</code>.</li> </ul>"},{"location":"changelog/#0102","title":"0.10.2","text":"<p>2023-08-08</p> <ul> <li>Apparently the bugsnag plugin relies on the version code to be set in the variant output, so now we set a default again (configurable via <code>slack.gradle.defaultVersionCode</code>). The default is <code>90009999</code>, for reasons.</li> </ul>"},{"location":"changelog/#0101","title":"0.10.1","text":"<p>2023-08-07</p> <ul> <li>Use a single version code for all APK architectures.</li> <li>Before, we used to compute a different version code for each architecture. This is kinda silly, and broke with AGP 8.1.0. So now we no longer do this. This means that by default, no custom version code is set unless an override is set in <code>{rootProject}/build/ci/release.version</code>. The default behavior will be to just use the version set in the <code>android</code> DSL.</li> <li>Update to Detekt <code>1.23.1</code>.</li> <li>Update to Gradle Enterprise <code>3.14.1</code>.</li> <li>Update to Compose Multiplatform <code>1.4.3</code>.</li> <li>Update to SqlDelight <code>2.0.0</code>.</li> <li>Update to Anvil <code>2.4.7</code>.</li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":"<p>2023-07-25</p> <ul> <li>Update to Kotlin <code>1.9.0</code>.</li> <li>Update to KSP <code>1.9.0-1.0.12</code>.</li> <li>Update to AGP <code>8.1.0</code>.</li> <li>Update kotlin-cli-util to <code>1.2.3</code>.</li> <li>Update MoshiX to <code>0.24.0</code>.</li> <li>Update redacted to <code>1.5.0</code>.</li> <li>Update wire to <code>4.8.0</code>.</li> <li>Add new dagger flag to ignore wildcard keys by default.</li> <li>https://dagger.dev/dev-guide/compiler-options#ignore-provision-key-wildcards</li> </ul>"},{"location":"changelog/#0918","title":"0.9.18","text":"<p>2023-07-12</p> <ul> <li>Fix: Differentiate unit and instrumentation tests in Skippy. Now changing a unit test will not cause the instrumentation tests to be marked as affected.</li> <li>Add <code>slack.dependencyrake.dryRun</code> gradle property flag for dependency rake to enable dry-run. If enabled, the project build files will not be modified and a separate <code>new-build.gradle.kts</code> file will be written to instead.</li> <li>Update Okio to <code>3.4.0</code>.</li> </ul>"},{"location":"changelog/#0917","title":"0.9.17","text":"<p>2023-07-07</p> <ul> <li>Don\u2019t register <code>RakeDependencies</code> task on platform projects.</li> <li>Fix configuration cache for Dependency Rake. Note that DAGP doesn\u2019t yet support it.</li> <li>Add Dependency Rake usage to its doc.</li> <li>Add missing identifiers aggregation for Dependency Rake. This makes it easier to find and add missing identifiers to version catalogs that dependency rake expects.</li> <li><code>./gradlew aggregateMissingIdentifiers -Pslack.gradle.config.enableAnalysisPlugin=true --no-configuration-cache</code></li> </ul>"},{"location":"changelog/#0916","title":"0.9.16","text":"<p>2023-06-30</p> <ul> <li>Enable lint on test sources by default.</li> <li>Account for all version catalogs in <code>DependencyRake</code>.</li> <li>Update Guava to <code>32.1.0-jre</code>.</li> </ul>"},{"location":"changelog/#0915","title":"0.9.15","text":"<p>2023-06-29</p> <ul> <li>Switch Robolectric jar downloads to use detached configurations.</li> <li>This lets Gradle do the heavy lifting of caching the downloaded jars and also allows downloading them from a configured repository setup. This also simplifies the up-to-date checks.</li> <li>Docs are now published on https://slackhq.github.io/slack-gradle-plugin. This is a work in progress.</li> <li>API kdocs are published at https://slackhq.github.io/slack-gradle-plugin/api/0.x/.</li> <li>Update <code>kotlin-cli-util</code> to 1.2.2.</li> </ul>"},{"location":"changelog/#0914","title":"0.9.14","text":"<p>2023-06-25</p> <ul> <li>Fix compose compiler config not applying to android projects.</li> </ul>"},{"location":"changelog/#0913","title":"0.9.13","text":"<p>2023-06-24</p> <ul> <li>Fix wrong map key name being used in exclusion.</li> </ul>"},{"location":"changelog/#0912","title":"0.9.12","text":"<p>2023-06-24</p> <ul> <li>Fix wrong dependency being used for compose-compiler in new Compose configuration overhaul.</li> </ul>"},{"location":"changelog/#0911","title":"0.9.11","text":"<p>2023-06-24</p> <ul> <li>Overhaul configuration of the Compose compiler across Android and multiplatform projects to make it easier to test the matrix of the AndroidX compose compiler, the JetBrains compose compiler, and new Kotlin versions.</li> <li>New: Add a <code>sgp.compose.multiplatform.forceAndroidXComposeCompiler</code> Gradle property flag to force use of the AndroidX compose compiler in Compose Multiplatform projects.</li> <li>New: Add a <code>sgp.config.jvmVendor.optOut</code> Gradle property flag to disable jvmVendor configuration in toolchains.</li> <li>Fix: No longer try to watch thermals on Intel macOS machines when configuration cache is enabled.</li> </ul>"},{"location":"changelog/#0910","title":"0.9.10","text":"<p>2023-06-06</p> <ul> <li>Fix: Don\u2019t apply vendor property to Bootstrap toolchain if it\u2019s undefined.</li> </ul>"},{"location":"changelog/#099","title":"0.9.9","text":"<p>2023-06-06</p> <ul> <li>New: Robolectric is now optional. Its support will only be enabled if there is a <code>robolectric</code> key in the primary version catalog.</li> <li>Enhancement: Update bootstrap JVM args to use ExitOnOutOfMemoryError for OOMs. No longer takes a heap dump on OOM.</li> <li>Enhancement: Update unit test verbose mode to use CrashOnOutOfMemoryError for OOMs to produce more logs.</li> <li>Fix: Bootstrap now respects the <code>sgp.config.jvmVendor</code> property.</li> <li>Build against Wire to <code>4.7.0</code>.</li> <li>Build against Anvil <code>2.4.6</code>.</li> <li>Build against AGP <code>8.0.2</code>.</li> <li>Build against Detekt <code>1.23.0</code>.</li> </ul>"},{"location":"changelog/#098","title":"0.9.8","text":"<p>2023-05-15</p> <ul> <li>Fix eager check of whether or not androidTest is enabled in <code>slack</code> DSL.</li> </ul>"},{"location":"changelog/#097","title":"0.9.7","text":"<p>2023-05-15</p> <ul> <li>Fix application targets not getting marked as androidTest()-enabled.</li> </ul>"},{"location":"changelog/#096","title":"0.9.6","text":"<p>2023-05-09</p> <ul> <li>Fix wrong use of <code>disallowChanges()</code> on <code>javaCompiler</code> in JavaCompile tasks. It seems that Gradle sets this multiple times.</li> <li>Improve git version matching.</li> </ul>"},{"location":"changelog/#095","title":"0.9.5","text":"<p>2023-05-09</p> <ul> <li>Use <code>disallowChanges()</code> where possible on properties SGP controls in order to avoid accidental overwrites.</li> <li>Make <code>ComputeAffectedProjectsTask</code> also generate a <code>affected_android_test_projects.txt</code> file with a newline-delimited list of affected projects that enable <code>androidTest()</code>. This can be used in CI scripts to statically determine if instrumentation tests need to run.</li> </ul>"},{"location":"changelog/#094","title":"0.9.4","text":"<p>2023-05-06</p> <ul> <li>Fix alias naming in <code>SlackVersions</code>. See <code>SlackVersions.kt</code> for updated expected naming of aliases.</li> </ul>"},{"location":"changelog/#093","title":"0.9.3","text":"<p>2023-05-05</p> <ul> <li>Add <code>jdk.compiler/com.sun.tools.javac.model</code> to Bootstrap Gradle JVM args and exec prefixes for binaries for GJF 17.</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<p>2023-05-05</p> <ul> <li>Fix accidental noisy JVM vendor log.</li> </ul>"},{"location":"changelog/#091","title":"0.9.1","text":"<p>2023-05-04</p> <p>Happy May the Fourth!</p> <ul> <li>Add new <code>sgp.config.jvmVendor</code> property to control the JVM vendor used in Kotlin and Java toolchains. This value is used to match a known vendor spec, such as <code>AZUL</code>.</li> <li>Apply the kover plugin in an <code>afterEvaluate</code> block to avoid https://github.com/Kotlin/kotlinx-kover/issues/362.</li> <li>Update jgrapht to 1.5.2.</li> <li>Update oshi to 6.4.2.</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<p>2023-04-30</p> <ul> <li>Improve Skippy logging.</li> <li>Configure all Kotlin compilations, not just JVM compilations.</li> <li>Split standard JVM args and common Kotlin args.</li> <li>Simplify <code>OkHttpClient</code> setup in <code>SlackTools</code>.</li> <li>Update to Kotlin 1.8.21.</li> <li>Support Dagger KSP in <code>slack.features.dagger</code> DSL controls. There are two new properties to control this:</li> <li><code>slack.ksp.allow-dagger</code> \u2013 allow use of Dagger in KSP.</li> <li><code>slack.ksp.allow-anvil</code> \u2013 allow use of Anvil in KSP. Note this is not yet implemented in Anvil, just a toe-hold for the future.</li> <li>Add debugging logs for loading <code>SlackToolsExtension</code> instances + fix classloader used for it.</li> <li>Gracefully handle <code>SlackToolsExtension</code> extensions that fail to load.</li> </ul>"},{"location":"changelog/#0810","title":"0.8.10","text":"<p>2023-04-25</p> <ul> <li>Add <code>Context</code> to <code>SlackToolsExtension</code>.</li> </ul>"},{"location":"changelog/#089","title":"0.8.9","text":"<p>2023-04-25</p> <ul> <li>Expose missing <code>SlackTools.findExtension</code> API.</li> <li>Expose missing <code>SlackTools.SERVICE_NAME</code> for <code>@ServiceReference</code> API.</li> </ul>"},{"location":"changelog/#088","title":"0.8.8","text":"<p>2023-04-25</p> <ul> <li>Update to Kotlin 1.8.20.</li> <li>Remove <code>moshi-kotlin</code>, only use generated adapters now.</li> <li>Don\u2019t auto-apply the Kover plugin on a platform project.</li> <li>Add new <code>sgp.ge.apply-common-build-tags</code> property flag to gate applying common build tags to a project.</li> <li>Switch <code>SlackToolsExtension</code> to work as a <code>ServiceLoader</code> instead.</li> </ul>"},{"location":"changelog/#087","title":"0.8.7","text":"<p>2023-04-23</p> <ul> <li>Remove lock file checking in <code>SlackTools</code> because this apparently invalidates configuration cache every time.</li> </ul>"},{"location":"changelog/#086","title":"0.8.6","text":"<p>2023-04-22</p> <ul> <li>Revert using native Kotlin lambdas instead of <code>class</code> for SAM conversions due to https://github.com/gradle/gradle/issues/24871.</li> </ul>"},{"location":"changelog/#085","title":"0.8.5","text":"<p>2023-04-22</p> <ul> <li>Clean up thermals logging setup in <code>SlackTools</code> and support enabling property at different scopes (local.properties, etc).</li> <li>Shut down thermals heartbeat executor when <code>SlackTools</code> is closed.</li> <li>Use native Kotlin lambdas instead of <code>class</code> for SAM conversions. The minimum supported Gradle version is now 8.1, which introduced support for this.</li> </ul>"},{"location":"changelog/#084","title":"0.8.4","text":"<p>2023-04-22</p> <ul> <li>Fix JSON serialization for thermals data.</li> </ul>"},{"location":"changelog/#083","title":"0.8.3","text":"<p>2023-04-22</p> <ul> <li>Don\u2019t accidentally create new <code>SlackTools</code> instances when reporting background data to Gradle Enterprise. These instances would be orphaned because this would happen after Gradle had closed all existing services, and create a memory leak.</li> <li>Use a lock file to track <code>SlackTools</code> instances.</li> <li>Use a single-threaded <code>Executor</code> for <code>SlackTools</code>\u2019 thermals heartbeat.</li> </ul>"},{"location":"changelog/#082","title":"0.8.2","text":"<p>2023-04-22</p> <ul> <li>Log a <code>Throwable</code> with multiple instances of <code>SlackTools</code> to help track origin points.</li> </ul>"},{"location":"changelog/#081","title":"0.8.1","text":"<p>2023-04-22</p> <ul> <li>Add some debug logging to <code>SlackTools</code> to track multiple instances.</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<p>2023-04-15</p> <ul> <li>Fix: Wrap all exec operations in a <code>ValueSource</code> for Gradle 8.x compatibility.</li> <li>Fix: Set git line endings to <code>PLATFORM_NATIVE</code> in spotless by default. Its default of looking at <code>.gitattributes</code> is expensive and incompatible with Gradle 8.1+ configuration caching.</li> <li>Fix: Add <code>slack.auto-apply.sort-dependencies</code> boolean Gradle property to gate auto-applying the sort-dependencies plugin.</li> <li>SGP now requires AGP 8.0+ (and with it \u2013 Gradle 8+).</li> </ul>"},{"location":"changelog/#079","title":"0.7.9","text":"<p>2023-04-01</p> <p>Happy April Fool\u2019s Day!</p> <ul> <li>[Skippy] Recursively resolve project dependencies to avoid missing transitive edges in the graph. Previously we only computed shallow dependencies.</li> </ul>"},{"location":"changelog/#078","title":"0.7.8","text":"<p>2023-03-28</p> <ul> <li>Fix: Add missing <code>detekt</code> task dependencies for <code>globalDetekt</code>.</li> <li>Fix: Only apply detekt config once (even if multiple Kotlin plugins are applied).</li> </ul>"},{"location":"changelog/#077","title":"0.7.7","text":"<p>2023-03-27</p> <ul> <li>Add new <code>slack.detekt.full</code> property to gate whether or to run full detekt (i.e. with type resolution). If disabled, <code>detektRelease</code>/<code>detektMain</code> and associated tasks will be disabled and not used in <code>detektGlobal</code>.</li> </ul>"},{"location":"changelog/#076","title":"0.7.6","text":"<p>2023-03-25</p> <ul> <li>Fix: Apply matching configurations to <code>DetektCreateBaselineTask</code> tasks too due to https://github.com/detekt/detekt/issues/5940.</li> </ul>"},{"location":"changelog/#075","title":"0.7.5","text":"<p>2023-03-24</p> <ul> <li>[Skippy] Add more default configurations.</li> <li>[Skippy] Add <code>slack.avoidance.build-upon-default-affected-project-configurations</code> flag to make provided configurations build upon defaults.</li> <li>Add new <code>globalDetekt</code> task that runs <code>detekt</code> on all subprojects. This is Skippy-compatible and responds to <code>slack.avoidance.affectedProjectsFile</code>.</li> </ul>"},{"location":"changelog/#074","title":"0.7.4","text":"<p>2023-03-22</p> <ul> <li>Don\u2019t expose <code>androidExtension</code> publicly in <code>SlackExtension</code> to avoid Gradle mismatching number of type arguments in AGP 8.1.0-alpha10+.</li> </ul>"},{"location":"changelog/#073","title":"0.7.3","text":"<p>2023-03-22</p> <ul> <li>Set <code>Detekt.jdkHome</code> to null to avoid https://github.com/detekt/detekt/issues/5925.</li> <li>Rename <code>String.safeCapitalize()</code> to <code>String.capitalizeUS()</code> to make it more explicit.</li> </ul>"},{"location":"changelog/#072","title":"0.7.2","text":"<p>2023-03-21</p> <ul> <li>Disable Live Literals in Compose by default due to multiple issues. They can be enabled via <code>-Pslack.compose.android.enableLiveLiterals=true</code>.</li> <li>Poor runtime performance: https://issuetracker.google.com/issues/274207650.</li> <li>Non-deterministic class files breaking build cache: https://issuetracker.google.com/issues/274231394.</li> <li>[Skippy] Add <code>.github/actions/**</code> to default never skip filters.</li> </ul>"},{"location":"changelog/#071","title":"0.7.1","text":"<p>2023-03-20</p> <ul> <li>[Skippy] Improve pattern configuration.</li> <li>Make the default patterns public. This allows consumers to more      easily reuse them when customizing their own.</li> <li>Use sets for the type to better enforce uniqueness requirements.</li> <li>Add github actions to never-skip defaults.</li> <li>Add excludePatterns to allow finer-grained control. This runs after      include filtering so that users can manually exclude certain files that      may otherwise be captured in an inclusion filter and is difficult to      describe in a simple glob pattern. GitHub action does similar controls      for CI matrices.</li> <li>[Skippy] Allow relative (from the project root) to <code>affected_projects.txt</code> and allow non-existent files as a value. This makes it easy to gracefully fall back in CI.</li> <li>[Skippy] Fix logging path matchers missing toString() impls.</li> <li>[SKippy] Log verbosely in debug mode when skipping task deps.</li> <li>Update oshi to <code>6.4.1</code>.</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":"<p>2023-03-17</p>"},{"location":"changelog/#project-skippy","title":"Project Skippy","text":"<p>This release introduces an experimental new <code>computeAffectedProjects</code> task for computing affected projects based on an input of changed files. The goal of this is to statically detect which unit test, lint, and androidTest checks can be safely skipped in CI on pull requests.</p> <p>Example usage <pre><code>./gradlew computeAffectedProjects --changed-files changed_files.txt\n</code></pre></p> <p>Where <code>changed_files.txt</code> is resolved against the root repo directory and contains a newline-delimited list of changed files (usually inferred from a PR).</p> <p>A simple example of how to produce such a file with the <code>gh</code> CLI:</p> <pre><code>gh pr view ${{ github.event.number }} --json files -q '.files[].path' &gt; changed_files.txt\n</code></pre> <p>One would run this task first as a preflight task, then run subsequent builds with the <code>slack.avoidance.affectedProjectsFile</code> Gradle property pointing to its output file location (printed at the end of the task).</p> <pre><code>./gradlew ... -Pslack.avoidance.affectedProjectsFile=/Users/zacsweers/dev/slack/slack-android-ng/build/skippy/affected_projects.txt\n</code></pre> <p>The <code>globalCiLint</code>, <code>globalCiUnitTest</code>, and <code>aggregateAndroidTestApks</code> tasks all support reading this property and will avoid adding dependencies on tasks in projects that are not present in this set.</p> <p>The <code>ComputeAffectedProjectsTask</code> task has some sensible defaults, but can be configured further in the root projects like so.</p> <pre><code>tasks.named&lt;ComputeAffectedProjectsTask&gt;(\"computeAffectedProjects\") {\n  // Glob patterns of files to include in computing\n  includePatterns.addAll(\n    \"**/*.kt\",\n    \"**/*.java\",\n  )\n  // Glob patterns of files that, if changed, should result in not skipping anything in the build\n  neverSkipPatterns.addAll(\n    \"**/*.versions.toml\",\n    \"gradle/wrapper/**\",\n  )\n}\n</code></pre> <p>Debug logging can be enabled via the <code>slack.debug=true</code> Gradle property. This will output timings, logs, and diagnostics for the task.</p> <p>The configurations used to determine the build graph can be customized via comma-separated list to the <code>slack.avoidance.affected-project-configurations</code> property.</p>"},{"location":"changelog/#061","title":"0.6.1","text":"<p>2023-03-15</p> <p>Happy Ted Lasso season 3 premier day!</p> <ul> <li>Fix: Remove <code>UseContainerSupport</code> jvm arg from unit tests as this appears to only work on Linux.</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<p>2023-03-14</p> <p>Happy Pi day!</p> <ul> <li>Refactor how unit tests are configured.</li> <li><code>Test</code> tasks are now configured more consistently across CI and local, so there should be more cache hits.</li> <li>Add a new <code>globalCiUnitTest</code> task to the root project to ease running <code>ciUnitTest</code> tasks across all subprojects.</li> <li>Add new properties to <code>SlackProperties</code> for controlling max parallelism and <code>forkEvery</code> options in <code>Test</code> tasks.</li> <li>Refactor how lint tasks are configured.</li> <li>Add a new <code>ciLint</code> task to every project that depends on all lint tasks in that project. This is intended to be the inverse     behavior of the built-in <code>lint</code> task in Android projects, which only runs the default variant\u2019s lint task.</li> <li>Add a new <code>globalCiLint</code> task to the root project to ease running <code>ciLint</code> tasks across all subprojects.</li> <li>Add new properties to <code>SlackProperties</code> for controlling which variants should be linted.</li> <li>Revert \u201cAdd lintErrorRuleIds property\u201d. <code>lint.xml</code> is the right place for this kind of logic.</li> </ul>"},{"location":"changelog/#0510","title":"0.5.10","text":"<p>2023-03-07</p> <ul> <li>Reduce noisy JNA load failures logging. Still have not gotten to the root cause, but at least this will reduce the log noise.</li> <li>Add a new <code>slack.lint.severity.errorRuleIds</code> Gradle property to specify lint rule IDs that should always be error severity.</li> </ul>"},{"location":"changelog/#059","title":"0.5.9","text":"<p>2023-02-27</p> <ul> <li>Gracefully handle JNA load failures in thermals logging.</li> </ul>"},{"location":"changelog/#058","title":"0.5.8","text":"<p>2023-02-20</p> <ul> <li>Enhancement: Remove kotlin-dsl from the plugin. If you were indirectly relying on its APIs from this plugin, you\u2019ll need to add that dependency separately.</li> <li>Enhancement: Better support fully modularized lints</li> <li><code>checkDependencies</code> is no longer enabled by default.</li> <li>Make the baseline file name configurable via <code>slack.lint.baseline-file-name</code> property. Defaults to <code>lint-baseline.xml</code>.</li> <li>Fix: <code>ImplicitSamInstance</code> lint not being enabled.</li> </ul>"},{"location":"changelog/#057","title":"0.5.7","text":"<p>2023-02-15</p> <ul> <li>Fix: <code>MergeFileTask.kt</code> was accidentally removed during a previous release.</li> <li>Fix: Add <code>jna-platform</code> dependency to align with the <code>jna</code> dependency version.</li> </ul>"},{"location":"changelog/#056","title":"0.5.6","text":"<p>2023-02-15</p> <p>Do not use! Release was accidentally messed up.</p>"},{"location":"changelog/#055","title":"0.5.5","text":"<p>2023-02-13</p> <ul> <li>Fix: <code>LocTask</code> is now compatible with Gradle 8.0 and has the correct task dependencies when Ksp, Kapt, etc are running.</li> <li>Fix: <code>LocTask</code> is now compatible with remote build cache.</li> <li>Enhancement: ModScore now supports KSP.</li> <li>Enhancement: Binary download tasks (<code>KtfmtDownloadTask</code>, <code>DetektDownloadTask</code>, etc) now have prettier and more reliable download progress indications.</li> <li>Enhancement: <code>UpdateRobolectricJarsTask</code> now uses Gradle workers to parallelize downloads. On gigabit wifi, this takes the task runtime down from ~21sec to ~13sec.</li> <li>Enhancement: The boolean <code>SLACK_FORCE_REDOWNLOAD_ROBOLECTRIC_JARS</code> env variable can be used to force <code>UpdateRobolectricJarsTask</code> to redownload jars even if already downloaded. Behavior change: Mod score must now be opted in to via the <code>slack.gradle.config.modscore.enabled=true</code> gradle property.</li> <li>Enhancement: Mod score can be disabled per-project via the <code>slack.gradle.config.modscore.ignore=true</code> gradle property.</li> </ul>"},{"location":"changelog/#054","title":"0.5.4","text":"<p>2023-02-07</p> <ul> <li>New: Integrate gradle-dependency-sorter as another formatter. This automatically apply if the <code>sortDependencies</code> toml version is present, and you can have it download+create executable binaries via <code>./gradlew downloadDependenciesSorter</code>.</li> <li>Enhancement: Improve compose multiplatform support. Now the <code>compose()</code> DSL is moved to <code>slack.features</code> and offers an optional <code>multiplatform</code> parameter to enable the compose multiplatform plugin.   <pre><code>slack {\n  features {\n    compose(multiplatform = &lt;true|false&gt;)\n  }\n}\n</code></pre></li> <li>Build against Kotlin <code>1.8.10</code> and AGP <code>7.4.1</code>.</li> </ul>"},{"location":"changelog/#053","title":"0.5.3","text":"<p>2023-01-27</p> <ul> <li>Fix the <code>MergeFilesTask</code> monkeypatch using env vars instead of system props.</li> </ul>"},{"location":"changelog/#052","title":"0.5.2","text":"<p>2023-01-26</p> <ul> <li>Try another fix for the <code>MergeFilesTask</code> monkeypatch plus extra logging. Feel free to skip this update if you\u2019re unaffected.</li> </ul>"},{"location":"changelog/#051","title":"0.5.1","text":"<p>2023-01-23</p> <ul> <li>Fix: Unwrap <code>Optional</code> for <code>google-coreLibraryDesugaring</code> dependency before adding it. The Gradle API\u2019s lack of type safety strikes again.</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<p>2023-01-23</p> <ul> <li>New: Introduce a new <code>sgp-monkeypatch-agp</code> artifact. This contains monkeypatches for AGP where we try to fix bugs. This initial version contains a patched <code>MergeFilesTask</code> that sorts files before merging them to ensure deterministic outputs, as we believe this is causing our lint tasks to be non-cacheable across machines. This can be enabled via setting the <code>com.slack.sgp.sort-merge-files</code> system property to <code>true</code>.</li> <li>New: Rework how bugsnag is enabled. Instead of only applying the plugin in release/main builds, we now always apply the plugin and only enable uploads on release/main builds. This allows us to catch issues with the plugin in updates sooner, as before we would not see them on PRs.</li> <li>Uploads can be force-enabled via setting the <code>slack.gradle.config.bugsnag.enabled</code> gradle property to true.</li> <li>Branches that allow uploads can be configured via regexp value on the <code>slack.gradle.config.bugsnag.enabledBranchPattern</code> gradle property. For example: <code>slack.gradle.config.bugsnag.enabledBranchPattern=main|release_.*</code>.</li> <li>New: Source desugar libraries from <code>libs.versions.toml</code> instead of assuming the artifact name. Starting with 1.2.0, desugar JDK libs offers multiple artifacts. Point <code>google-coreLibraryDesugaring</code> in [libraries] to whichever artifact should be used.</li> <li>Fix: Catch and print errors with thermal closes.</li> <li>Misc: Update to JDK 19 and latest AGPs. The plugin itself still targets JVM 11 bytecode. AGP 7.4.0 is now required.</li> </ul>"},{"location":"changelog/#042","title":"0.4.2","text":"<p>2023-01-13</p> <ul> <li>Enhancement: Change default gradle memory percent in bootstrap from 25% to 50%.</li> <li>Fix: Support the gradle enterprise plugin retry implementation when using Gradle enterprise 3.12+.</li> </ul>"},{"location":"changelog/#041","title":"0.4.1","text":"<p>2023-01-09</p> <p>Happy new year!</p> <ul> <li>Fix: Remove EitherNet compiler option opt-ins.</li> <li>Update Okio to <code>3.3.0</code>.</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<p>2022-12-29</p> <ul> <li>Update to Kotlin 1.8.0. This plugin now requires Kotlin 1.8.0 or later as it only configures KGP\u2019s new <code>compilerOptions</code> API now.</li> </ul>"},{"location":"changelog/#038","title":"0.3.8","text":"<p>2022-12-22</p> <ul> <li>Add support for AGP 8.0.0-alpha10.</li> </ul>"},{"location":"changelog/#037","title":"0.3.7","text":"<p>2022-12-19</p> <ul> <li>Fix: Don\u2019t apply freeCompilerArguments.</li> <li>Fix: Add missing license information to published POM files.</li> </ul>"},{"location":"changelog/#036","title":"0.3.6","text":"<p>2022-12-15</p> <ul> <li>Backport <code>android.packagingOptions.jniLibs.pickFirst</code> for AGP 8.x compatibility, as the returned type by <code>jniLibs</code> changed from <code>JniLibsPackagingOptions</code> to <code>JniLibsPackaging</code>.</li> </ul>"},{"location":"changelog/#035","title":"0.3.5","text":"<p>2022-12-06</p> <ul> <li>Introduce <code>compileCiUnitTest</code> lifecycle task to just compile (but not run!) unit tests that are run by <code>ciUnitTest</code>.</li> </ul>"},{"location":"changelog/#034","title":"0.3.4","text":"<p>2022-12-04</p> <ul> <li>Only enable <code>isIncludeAndroidResources</code> in Android unit tests automatically when <code>robolectric()</code> is used.</li> </ul>"},{"location":"changelog/#033","title":"0.3.3","text":"<p>2022-11-11</p> <ul> <li>Add some more Kotlin compiler arguments to compilations. See #160</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<p>2022-11-10</p> <ul> <li>(Strict mode only) Check for <code>AndroidManifest.xml</code> files in androidTest sources + ensure they\u2019re debuggable.</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<p>2022-10-20</p> <ul> <li>Exclude <code>**/build/**</code> from <code>Detekt</code> tasks.</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<p>2022-10-14</p> <ul> <li>New: Support <code>com.android.test</code> projects.</li> <li>New: Preliminary support for AGP 8.x.</li> <li>Automatically add compose compiler dep in Compose multiplatform (i.e. <code>org.jetbrains.compose</code>) projects.</li> <li>Support Error Prone Gradle Plugin 3.x.</li> <li>Update <code>me.tongfei:progressbar</code> to <code>0.9.5</code>.</li> </ul>"},{"location":"changelog/#024","title":"0.2.4","text":"<p>2022-10-06</p> <ul> <li>Fix: Only check allowed androidTest variants if any are defined.</li> </ul>"},{"location":"changelog/#023","title":"0.2.3","text":"<p>2022-10-03</p> <ul> <li>Fix: Only configure bootstrap conditionally.</li> </ul>"},{"location":"changelog/#022","title":"0.2.2","text":"<p>2022-10-03</p> <ul> <li>Add necessary <code>--add-opens</code> to <code>Test</code> tasks for Robolectric 4.9+ when it\u2019s enabled.</li> <li>Avoid <code>subprojects</code> module stats and <code>allprojects</code> in bootstrap for better project isolation support.</li> </ul>"},{"location":"changelog/#021","title":"0.2.1","text":"<p>2022-09-27</p> <ul> <li>Fix: New <code>androidTest(allowedVariants = ...)</code> wasn\u2019t running on <code>com.android.application</code> projects.</li> <li>Fix: Configure <code>Lint</code> DSL block for <code>com.android.library</code> and <code>org.jetbrains.kotlin.jvm</code> projects too.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<p>2022-09-23</p> <ul> <li>Add option to enable only certain variants\u2019 android tests.</li> </ul> <pre><code>slack {\n  android {\n    features {\n      androidTest(allowedVariants = setOf(\"internalDebug\"))\n    }\n  }\n}\n</code></pre>"},{"location":"changelog/#012","title":"0.1.2","text":"<p>2022-09-20</p> <ul> <li>Support Robolectric jars for Android API 30.</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<p>2022-09-08</p> <ul> <li>Fix wrong <code>slack.unit-test</code> plugin application.</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<p>2022-09-07</p> <ul> <li>Update to Moshi 1.14.0.</li> <li>Disable <code>Instantiatable</code> lint in min SDK 28+ due to lint bug.</li> <li>Specify kotlin version in compose compatibility check.</li> </ul>"},{"location":"code-of-conduct/","title":"Code of Conduct","text":""},{"location":"code-of-conduct/#introduction","title":"Introduction","text":"<p>Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.</p> <p>Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.</p> <p>This code and related procedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.</p> <p>For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct</p>"},{"location":"contributing/","title":"Contributors Guide","text":"<p>Note that this project is considered READ-ONLY. You are welcome to discuss or ask questions in the discussions section of the repo, but we do not normally accept external contributions without prior discussion.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Check out this repo with Android Studio or IntelliJ. It\u2019s a standard gradle project and conventional to check out.</p> <p>The primary project is <code>slack-plugin</code>.</p> <p>Kotlin should be used for more idiomatic use with Gradle/AGP APIs</p> <p>Code formatting is checked via Spotless. To run the formatter, use the <code>spotlessApply</code> command.</p> <pre><code>./gradlew spotlessApply\n</code></pre> <p>Optionally, there are commit hooks in the repo you can enable by running the below <pre><code>git config core.hooksPath config/git/hooks\n</code></pre></p>"},{"location":"platforms/gradle/architecture/","title":"Architecture","text":"<p>Foundry contains three Gradle plugins and some associated helper artifacts.</p>"},{"location":"platforms/gradle/architecture/#foundryrootplugin","title":"<code>FoundryRootPlugin</code>","text":"<p>This is the root plugin that is applied to the root project of a multi-project build.</p> <pre><code>plugins {\n  id(\"foundry.root\")\n}\n</code></pre> <p>Its responsibilities include:</p> <ul> <li>Registering the <code>FoundryTools</code> build service.</li> <li>Setting up global configuration (i.e. global lifecycle tasks, download tasks, etc).</li> <li>Validating the JDK matches the expected JDK defined in <code>libs.versions.toml</code>.</li> <li>Configure git (hooks, ignored revisions, etc).</li> <li>(If running on macOS) Validating the build isn\u2019t running in Rosetta mode.</li> </ul>"},{"location":"platforms/gradle/architecture/#foundrybaseplugin","title":"<code>FoundryBasePlugin</code>","text":"<p>This is the base plugin that is applied to all projects (including the root project).</p> <pre><code>plugins {\n  id(\"foundry.base\")\n}\n</code></pre> <p>Its responsibilities include:</p> <ul> <li>Configuring formatters for Spotless.</li> <li>Configuring the buildscript and dependency classpaths. This includes \u201cfixing\u201d any known bad dependencies (Hamcrest and CheckerFramework are a mess), failing on non-reproducible dependency declarations.</li> <li>Running standard subproject configurations via <code>StandardProjectConfigurations</code>.</li> <li>Configuring unit tests via <code>UnitTests</code>. This also includes configuring the Gradle test retry plugin, if enabled.</li> <li>Configuring NullAway, if enabled.</li> <li>Configuring Skippy.</li> <li>Configuring Mod Score tasks.</li> </ul>"},{"location":"platforms/gradle/architecture/#standardprojectconfigurations","title":"<code>StandardProjectConfigurations</code>","text":"<p>This class warrants special mention as it is responsible for the bulk of the configuration applied to projects Foundry manages.</p> <ul> <li>Creates and exposes the <code>foundry</code> extension DSL.</li> <li>Applies common configurations.</li> <li>This largely just sets up the dependency sorter plugin.</li> <li>Applies common JVM configurations.</li> <li>Applies common Kotlin configurations.</li> </ul>"},{"location":"platforms/gradle/architecture/#jvm-configurations","title":"JVM Configurations","text":"<p>All JVM projects (Android, Java, Kotlin) receive some common configuration for their JVM tasks.</p>"},{"location":"platforms/gradle/architecture/#common","title":"Common","text":"<ul> <li>Applies the repo\u2019s platform project, if any.</li> <li>Applies any BOM dependencies to platform-configurable configurations.</li> <li>Configures the dependency analysis gradle plugin and <code>DependencyRake</code>.</li> <li>Applies common annotations and common test bundles from version catalogs.</li> <li>Fails on non-androidx support library dependencies.</li> <li>Configure common annotations processors.</li> <li>This logic is largely in <code>StandardProjectConfigurations.configureAnnotationProcessors()</code> and <code>StandardProjectConfigurations.APT_OPTION_CONFIGS</code>, which seeks to apply common configs for known processors like Dagger and Moshi.</li> </ul>"},{"location":"platforms/gradle/architecture/#java","title":"Java","text":"<p>Java projects are fairly simple. Note that these are applied on all projects that apply the <code>java</code> plugin, which is most of them!</p> <ul> <li>They are just configured to ensure their source/target compatibility is set to the repo\u2019s JVM target.</li> <li>In non-android projects, <code>JavaCompile</code> tasks have their <code>options.release</code> property set to this as well.</li> <li>Gradle toolchains are used to manage the JDK used for <code>JavaCompile</code> tasks in non-android projects to ensure consistency.</li> <li>All <code>JavaCompile</code> tasks have <code>-parameters</code> added to <code>options.compilerArgs</code> for better static analysis and annotation processing support.</li> <li>If opted-in, error-prone and nullaway are applied and set up with the project with common configurations (configured checks, ignoring build dirs, etc).</li> <li>Foundry supports Error-Prone\u2019s auto-patching mode via enabling the <code>foundry.epAutoPatch</code> property.</li> </ul>"},{"location":"platforms/gradle/architecture/#android","title":"Android","text":"<ul> <li>Configures AndroidTest APK aggregation with Skippy support.</li> <li>Applies the Android cache fix plugin, if enabled.</li> <li>Configures common AGP extensions (both legacy extensions and new Component extensions).</li> <li>Disables unused/irrelevant variants. Foundry is single-variant for library projects by default.</li> <li>Disables android tests on projects unless opted in.</li> <li>Disables unit tests on app projects by default (we use the app project as just a shell project for producing an APK).</li> <li>Configures <code>compileOptions</code>, <code>defaultConfig</code>, compileSdk/targetSdk/minSdk/ndkVersion, etc.<ul> <li>Enables <code>vectorDrawables.useSupportLibrary</code>.</li> </ul> </li> <li>Enables core library desugaring.</li> <li>Configures common <code>testOptions</code> like orchestrator, <code>unitTests</code>, etc.<ul> <li><code>unitTests.isReturnDefaultValues</code> is always enabled for convenience.</li> <li><code>unitTests.isIncludeAndroidResources</code> is only enabled if robolectric is enabled on the project, as this is expensive to enable.</li> <li>Set up unit test <code>Test</code> tasks to depend on the <code>UpdateRobolectricJarsTask</code> if robolectric is enabled.</li> </ul> </li> <li>Patches objenesis dependency versions due to weird transitive dependencies in android test classpaths.</li> <li>Configures <code>com.android.library</code> and <code>com.android.application</code> projects. <code>com.android.test</code> is supported but somewhat limited.</li> <li>Application projects\u2026</li> <li>have their packaging config set up with some convenience common exclusions and handling common <code>jniLibs</code> handling.</li> <li>have v3 and v4 signing enabled by default.</li> <li>are configured with <code>PermissionChecks</code>.</li> <li>are configured with the Bugsnag gradle plugin, if enabled.</li> <li>Library projects\u2026</li> <li>are configured with an automatic <code>android.namespace</code>, if none is manually specified in the buildscript. The namespace is inferred from the project\u2019s Gradle path.</li> <li>are single-variant by default, set to <code>release</code>.</li> </ul>"},{"location":"platforms/gradle/architecture/#kotlin-configurations","title":"Kotlin Configurations","text":"<p>Kotlin projects are configured with KGP and Detekt in mind. Foundry supports configuring Android, JVM, Multiplatform, and Compose Multiplatform projects. Multiplatform for targets other than JVM/android is limited at the moment.</p> <p>Common configurations include:</p> <ul> <li>Setting computed kotlin daemon JVM args.</li> <li>Setting the <code>jvmToolchain</code> to align with the repo\u2019s JDK target.</li> <li>Configuring <code>KotlinCompilation</code> tasks with common configurations.</li> <li>Enabling <code>allWarningsAsErrors</code>.</li> <li>Adding free compiler args to <code>freeCompilerArgs</code>.<ul> <li>If a JVM compilation, add extra JVM args + set <code>jvmTarget</code> and <code>javaParameters</code>.</li> <li>Dynamic, dependency-based compiler args are also set via <code>StandardProjectConfigurations.configureFreeKotlinCompilerArgs()</code>. This is an annoying thing to have to do, but necessary because kotlinc will complain if you add opt-ins that are not recognized by any dependencies on that classpath.</li> </ul> </li> <li>Enabling K2 testing.</li> <li>Configure Detekt, if enabled, via <code>DetektTasks</code>.</li> <li>Configure Lint if not an Android project via the <code>com.android.lint</code> plugin and <code>LintTasks</code>.</li> <li>Configure the <code>src/{variant}/kotlin</code> source set in android projects, as  these are still not automatically enabled.</li> <li>Prevent use of the deprecated <code>android.extensions</code> extension.</li> <li>Configure kapt (if requested) with common configuration</li> <li><code>correctErrorTypes</code> is set to true for better error messages.</li> <li><code>mapDiagnosticLocations</code> is set to false because it\u2019s broken.</li> <li>Unless opted-in, disables kapt in tests due to this.</li> </ul>"},{"location":"platforms/gradle/architecture/#apkversioningplugin","title":"ApkVersioningPlugin","text":"<pre><code>plugins {\n  id(\"com.slack.gradle.apk-versioning\")\n}\n</code></pre> <p>This plugin is applied in Android application projects and is solely to configure the <code>versionCode</code> and <code>versionName</code> of APKs based on git and Gradle property inputs.</p> <p>The following properties are sourced</p> <pre><code>versionMajor=...\nversionMinor=...\nversionPatch=...\n</code></pre> <p>This also adds a <code>generateVersionProperties</code> task that is more or less only relevant for Slack\u2019s internal CI.</p>"},{"location":"platforms/gradle/architecture/#agp-handlers","title":"AGP Handlers","text":"<p>Foundry is designed to work with multiple versions of AGP at a time, albeit only for forward compatibility and testing reasons. Generally Foundry will only be tested against the latest stable version of AGP. To support multiple beta/canary versions of upcoming AGP versions, Foundry has an API called <code>AgpHandler</code>, which is intended to be an AGP-agnostic common interface for configuring AGP projects across breaking API (source or binary) changes. When a new such change is introduced, we create an <code>AgpHandler{version}</code> artifact and implementation with that AGP version as its minimum. At runtime, Foundry loads the relevant <code>AgpHandler</code> instance for the AGP version it is running against and relevant APIs use this instance via <code>FoundryTools</code> to interact with them in a version-agnostic way. These aren\u2019t always needed so there may be times when there are no implementations needed for the current suite of AGP versions.</p> <p>An example handler for AGP 8.0 looks like this.</p> <pre><code>// AutoService makes it available via ServiceLoader\n// The factory should always be AGP-api agnostic.\nclass AgpHandler80 : AgpHandler {\n  @Suppress(\"DEPRECATION\")\n  override val agpVersion: String\n    get() = com.android.builder.model.Version.ANDROID_GRADLE_PLUGIN_VERSION\n\n  @AutoService(AgpHandlerFactory::class)\n  class Factory : AgpHandlerFactory {\n    override val minVersion: VersionNumber = VersionNumber.parse(\"8.0.0\")\n\n    @Suppress(\"DEPRECATION\")\n    override fun currentVersion(): String =\n      com.android.builder.model.Version.ANDROID_GRADLE_PLUGIN_VERSION\n\n    override fun create(): AgpHandler {\n      return AgpHandler80()\n    }\n  }\n}\n</code></pre>"},{"location":"platforms/gradle/bootstrap/","title":"Bootstrap","text":"<p>Bootstrap is a tool for bootstrapping local dev environments. This is usually used in tandem with a bootstrap bash script that runs the <code>./gradlew bootstrap</code> task and any other repo-specific setups.</p> <p>The core implementation lives in <code>BootstrapTask.kt</code>.</p> <p>At a high level, bootstrap is mostly focused on configuring the JDK and daemon environments. Gradle has extremely limited configurability for the Gradle daemon, and we want to optimize the JDK for available space on different developer machines. To support this, we compute optimal daemon jvm arguments in bootstrap and write them to the user\u2019s home <code>~/.gradle/gradle.properties</code> to override repo-specific settings with client-side properties.</p> <p>For the JDK, it requests the JDK toolchain from Gradle\u2019s first-party APIs. This includes allowing Gradle to download the JDK if it\u2019s missing, which is useful for getting developers set up and running faster.</p> <p>Bootstrap is also useful on CI for its ability to scale available memory to the machine it\u2019s running on, so we generally run it as a preflight step for all of our CI jobs too.</p> <p>Finally, there are some other specific things it does to optimize things:</p> <ul> <li>Disable Gradle file watching on CI as it\u2019s not necessary there.</li> <li>Configure specific GC and heap args for optimized use in Gradle builds (favoring larger young generation spaces).</li> <li>Configure a fixed-size heap for CI to avoid time spent growing the heap.</li> </ul>"},{"location":"platforms/gradle/configuration/","title":"Configuration","text":"<p>TODO</p>"},{"location":"platforms/gradle/dependency-rake/","title":"Dependency Rake","text":"<p>Dependency rake is an tool we develop within foundry (Foundry) to automatically clean up Gradle build files.</p> <p>This tool uses the outputs of the dependency-analysis-gradle-plugin ( DAGP) to infer and apply fixes it recommends.</p>"},{"location":"platforms/gradle/dependency-rake/#types-of-fixes","title":"Types of Fixes","text":"<p>There are three main categories of fixes that DR applies.</p> <ol> <li>Remove unused dependencies.<ul> <li>Like it says on the tin, these are declared dependencies that are unused and should be removed.</li> </ul> </li> <li>Fix misused dependencies.<ul> <li>These are dependencies that are declared but only transitive dependencies they include are actually used. For   example - depending on RxAndroid but only using RxJava from it. These are fixed by replacing the dependency with   the specific transitive dependency.</li> </ul> </li> <li>Fix wrong configurations.<ul> <li>These are dependencies that declare the wrong Gradle configuration (e.g. api, implementation, etc). Dependencies   determined to be used in the \u201cpublic ABI\u201d of the library should be \u201capi\u201d configuration for use in dependent   projects. Anything else can be hidden as an \u201cimplementation\u201d or \u201ccompileOnly\u201d (if annotations-only) dependency.</li> </ul> </li> </ol>"},{"location":"platforms/gradle/dependency-rake/#benefits","title":"Benefits","text":"<p>The primary benefit of dependency rake is to improve build times by more or less \u201craking\u201d the build dependency graph. By removing and fixing dependencies, we remove unneeded edges in the build graph. This in turn provides improved build parallelism and better avoidance in Skippy CI pipelines.</p> <p>A secondary benefit is automatic upkeep of build files. As projects change over time, dependencies become obsolete and out of date. Most developers do not keep up with these changes over time, so automating this affords us extra upkeep that we currently do not do.</p>"},{"location":"platforms/gradle/dependency-rake/#implementation","title":"Implementation","text":"<p>The core implementation of DR lives in <code>DependencyRake.kt</code>.</p>"},{"location":"platforms/gradle/dependency-rake/#usage","title":"Usage","text":"<p>To run dependency rake in a project, use the below command</p> <pre><code>$ ./gradlew rakeDependencies -Pfoundry.config.enableAnalysisPlugin=true --no-configuration-cache\n</code></pre> <p>This will run all <code>rakeDependencies</code> tasks in the project. This task exists on all subprojects as well, but it  works best if all are run together.</p> <p>Sometimes dependency rake will try to replace identifiers with ones that are not present in any available version catalogs. Sometimes this is acceptable, but often times it can result in \u201cmissing\u201d dependencies from  the build after it runs. To help fix these, DR will write all missing identifiers out to a build output file.</p> <p>For convenience, you can also run <code>./gradlew aggregateMissingIdentifiers -Pslack.gradle.config.enableAnalysisPlugin=true --no-configuration-cache</code> to run all dependency rake tasks and aggregate these missing identifiers into a root project build output file.</p>"},{"location":"platforms/gradle/dsl/","title":"DSL","text":"<p>Foundry offers a DSL extension for configuring project behavior via the plugin. The idea is that developers don\u2019t really want to think about specific dependency wirings, and instead want to express what features they want and allow Foundry to automatically wire these up for them.</p> <p>Some examples of this include Dagger, Moshi code gen, Robolectric, and more.</p> <p>The primary entry point is the <code>foundry</code> extension in the build file, which is backed by the <code>FoundryExtension</code> interface.</p> <pre><code>foundry {\n    features {\n        dagger(...)\n        moshi(...)\n    }\n    android {\n        features {\n            robolectric(...)\n        }\n    }\n    testing {\n        burst()\n    }\n}\n</code></pre>"},{"location":"platforms/gradle/dsl/#features","title":"Features","text":""},{"location":"platforms/gradle/dsl/#circuit","title":"Circuit","text":"<p>The Circuit feature automatically sets up Circuit in the project. This includes controls for different Circuit artifacts and code gen. The default <code>circuit()</code> call will just enable Circuit\u2019s runtime + code gen.</p>"},{"location":"platforms/gradle/dsl/#dagger","title":"Dagger","text":"<p>The Dagger feature automatically sets up both Dagger and Anvil. This includes optional parameters to control whether or not you want the runtime only, component merging, or other features. This automatically handles applying the Anvil, kapt, or KSP plugins under the hood and any necessary dependencies to run them.</p> <p>The default <code>dagger()</code> call will just enable Dagger\u2019s runtime + Anvil\u2019s factory generation with no component merging ( to avoid the Kapt cost).</p>"},{"location":"platforms/gradle/dsl/#moshi","title":"Moshi","text":"<p>The Moshi feature handles setting up both Moshi and MoshiX. This includes handling applying code gen logic (either KSP or IR) as well as <code>moshi-sealed</code> support if requested.</p>"},{"location":"platforms/gradle/dsl/#redacted","title":"Redacted","text":"<p>This enables the redacted-compiler-plugin compiler plugin.</p>"},{"location":"platforms/gradle/dsl/#compose","title":"Compose","text":"<p>The Compose feature handles setting up Compose in both Android and multiplatform projects. This handles a bunch of boilerplate (see <code>ComposeUtil.kt</code>) for applying the right compose-compiler artifact version as well as enabling the right controls in the Android plugin.</p>"},{"location":"platforms/gradle/dsl/#test-fixtures","title":"Test Fixtures","text":"<p>This enables Gradle test fixtures in a project-agnostic fashion. In JVM projects this will apply the <code>java-test-fixtures</code> plugin, in Android projects this will configure the <code>android.testFixtures.enable</code> property.</p>"},{"location":"platforms/gradle/dsl/#android-features","title":"Android Features","text":""},{"location":"platforms/gradle/dsl/#robolectric","title":"Robolectric","text":"<p>The Robolectric feature handles setting up Robolectric in an Android project. This entails common Robolectric dependencies (including any bundles or core Robolectric project dependencies). This also sets up Robolectric jar downloads (via <code>UpdateRobolectricJarsTask</code>) for test tasks and enabling resource merging in tests (which Robolectric requires). There are a few other controls that <code>StandardProjectConfigurations</code> use to control or patch Robolectric\u2019s behavior.</p>"},{"location":"platforms/gradle/dsl/#android-test","title":"Android Test","text":"<p>By default, Foundry disables androidTests in projects. These can be enabled via the <code>androidTest()</code> feature, which will enable the relevant controls in the Android plugin. This can also accept specified variants to enable/disable.</p> <p>This is important for opting in tests to AndroidTest APK Aggregation.</p>"},{"location":"platforms/gradle/dsl/#resources","title":"Resources","text":"<p>By default, we disable Android resources (different from Java resources) and libraries have to opt-in to using them.</p> <p>This can be enabled via the <code>resources()</code> feature, which will enable the relevant <code>BuildFeature</code> in the Android plugin and also takes a required <code>prefix</code> parameter that is used as the required <code>resourcePrefix</code> for that library\u2019s resources to avoid naming conflicts.</p>"},{"location":"platforms/gradle/dsl/#android-application-features","title":"Android Application Features","text":""},{"location":"platforms/gradle/dsl/#permission-allowlist","title":"Permission AllowList","text":"<p>This enables checking of a permission allowlist. See <code>PermissionChecks</code> for more details.</p>"},{"location":"platforms/gradle/formatters-and-analysis/","title":"Formatters and Static Analysis","text":"<p>Foundry supports running a number of formatters and static analysis tools.</p> <p>Individual tools are usually gated on whether they have a version specified in <code>libs.versions.toml</code>. If they do not have a version specified, they are deemed not enabled.</p>"},{"location":"platforms/gradle/formatters-and-analysis/#formatting","title":"Formatting","text":"<p>The core set of formatters are:</p> <ul> <li>ktfmt (Kotlin)</li> <li>google-java-format (Java)</li> <li>gson (JSON)</li> <li>gradle-dependency-sorter (Gradle build file dependencies)</li> <li>Spotless (general purpose Gradle plugin that runs most of the above)</li> </ul>"},{"location":"platforms/gradle/formatters-and-analysis/#static-analysis","title":"Static Analysis","text":"<p>The core set of analysis tools supported in Foundry are:</p> <ul> <li>Android Lint (Kotlin, Java, XML resources, build files, etc.)</li> <li>Detekt (Kotlin)</li> <li>Error Prone (Java)</li> </ul>"},{"location":"platforms/gradle/formatters-and-analysis/#git-hooks","title":"Git Hooks","text":"<p>Foundry ships with a standard set of git hooks (pre-commit, etc) that it can bootstrap in projects by running <code>./gradlew installCommitHooks</code>. These hooks rely on checking in relevant binaries for each formatter/checker, it\u2019s strongly recommended to use git-lfs for these. These files should be edited as needed to best serve the project they\u2019re running in.</p> <p>Foundry can configure these hooks in the project automatically during bootstrap if you add the <code>foundry.git.hooksPath</code> gradle property and point it at the hooks directory that the above command output to, or wherever the host project opts to store them.</p> <p>Note that Detekt is not yet supported in git hooks as these require extra parameters for baselines.</p>"},{"location":"platforms/gradle/formatters-and-analysis/#downloading-binaries","title":"Downloading binaries","text":"<p>Each tool (ktfmt, gjf, etc) has corresponding <code>./gradlew update&lt;tool name&gt;</code> tasks that you can run to download and install them, by default to <code>config/bin/&lt;tool name&gt;</code>. You should re-run these any time you update a tool to re-run them.</p>"},{"location":"platforms/gradle/lint/","title":"Lint","text":"<p>TODO</p>"},{"location":"platforms/gradle/mod-score/","title":"Mod Score","text":"<p>TODO</p>"},{"location":"platforms/gradle/properties/","title":"Properties","text":"<p>TODO</p>"},{"location":"platforms/gradle/testing/","title":"Testing","text":"<p>TODO</p>"},{"location":"platforms/gradle/thermals-logging/","title":"Thermals Logging","text":"<p>TODO</p>"},{"location":"platforms/gradle/utilities/","title":"Utilities","text":"<p>There are a bunch of miscellaneous utilities and tools in this project that don\u2019t necessarily warrant their own dedicated docs page.</p>"},{"location":"platforms/gradle/utilities/#androidsourcesconfigurer","title":"<code>AndroidSourcesConfigurer</code>","text":"<p>When testing new Android SDK betas, the compile SDK version is available months before sources are. Developers want to build against these APIs, but we don\u2019t want to make their experience in the IDE worse than necessary. The problem with using a compile SDK version that doesn\u2019t have sources is that the IDE can\u2019t provide any documentation for the APIs and will just show stub files instead.</p> <p>To work mitigate this, we will patch the SDK by putting a copy of the previous version\u2019s sources in the location of the new SDK. This allows most sources to still index properly during the beta period. Then, once the new sources are available, the consuming repo needs only to update the <code>foundry.latestCompileSdkWithSources</code> gradle property to that new SDK version and the patcher will clear out that copy and let AGP download the real ones.</p> <p>This runs automatically in the root plugin.</p>"},{"location":"platforms/gradle/utilities/#androidtest-apk-aggregation","title":"AndroidTest APK Aggregation","text":"<p>At Slack we use FTL + Fladle for running our instrumentation tests. In order to add more test APKs from modularized instrumentation tests in other subprojects, we have to aggregate a list of their locations and pass them on to Fladle. This is done via <code>AndroidTestApksTask</code>, which is registered in the root project and can be wired to pipe its output file into Fladle\u2019s config input.</p> <p>Example</p> <pre><code>val aggregatedApksProvider = rootProject.tasks\n  .named&lt;AndroidTestApksTask&gt;(\"aggregateAndroidTestApks\")\n  .flatMap { it.outputFile }\n  .map { it.asFile.readLines() }\n\ntasks\n  .withType&lt;YamlConfigWriterTask&gt;()\n  .named { it == \"writeConfigProps${fladleTarget}\" }\n  .configureEach { additionalTestApks.value(testInputsProvider) }\n</code></pre> <p>This task is automatically added to whenever a subproject uses the <code>androidTest()</code> DSL feature.</p>"},{"location":"platforms/gradle/utilities/#permissionchecks","title":"<code>PermissionChecks</code>","text":"<p>Permissions are an integral part of Android apps, and oversight into what permissions are required in the app is critical to a release pipeline. <code>PermissionChecks</code> is a feature to help with this.</p> <p>The workflow we use at Slack is like this:</p> <ul> <li>We check in a <code>permissionsAllowlist.txt</code> file in the Slack android repo.</li> <li>This file is owned in GitHub by a specific codeowner rule that adds a permission reviewers group.</li> <li>This file is passed into the <code>allowListFile</code> DSL feature in the application   project.</li> <li>On each build, Foundry automatically checks that the permissions present in the release APK manifest match the ones   defined in the allowlist.</li> </ul> <p>This way new permissions are not accidentally or secretly added to the app.</p>"},{"location":"tools/cli/","title":"Foundry CLIs","text":"<p>An artifact containing basic CLI utilities for Kotlin.</p>"},{"location":"tools/cli/#installation","title":"Installation","text":"<p> <pre><code>// In Gradle\ndependencies {\n  implementation(\"com.slack.foundry:cli:&lt;version&gt;\")\n}\n\n// In kotlin script\n@file:DependsOn(\"com.slack.foundry:cli:{version}\")\n</code></pre></p>"},{"location":"tools/cli/#local-testing","title":"Local testing","text":"<p>If consuming these utilities from a kotlin script file, you can test changes like so:</p> <ol> <li>Set the version in <code>gradle.properties</code>, such as <code>2.5.0-LOCAL1</code>.</li> <li>Run <code>./gradlew publishToMavenLocal</code> to publish the current version to your local maven repository.</li> <li>In your script file, add the local repository and update the version:     <pre><code>@file:Repository(\"file:///Users/{username}/.m2/repository\")\n@file:DependsOn(\"com.slack.foundry:cli:{version you set in gradle.properties}\")\n</code></pre></li> <li>Repeat as needed while testing, incrementing the version number each time to avoid caching issues.</li> </ol>"},{"location":"tools/skippy/","title":"Skippy","text":"<p>TODO</p>"}]}